[
    {
        "uri": "/docs/chaingear/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Full Changelog\nClosed issues:\n Create awesome gif for readme #1067 Consensus around basic chaingear utility in Cyb #1066 Remove linter warnings from console #1057 New fee splitting contracts #1055 Check and update cross contract interfaces for contracts #1054 Rewrite beneficiary contract frontend interfaces #1053 Root registry structure #1047 Make .chaingear frontend work with Main Ethereum network #1044 Release first iteration of chaingear paper #1030 Master audit #1001 Deploy to mainnet #997 Decreasing gas consumption, audit #993 0.1 chaingear release #974  Merged pull requests:\n edit docs org and config.yml in CI #1068 (SaveTheAles) UPD CI job docs upd #1033 (SaveTheAles)  0.1.0 (2019-01-28) Closed issues:\n Verification of databases on Etherscan #1046 Add favicon for chaingear landing #1045 Create components for chaingear #1043 Polish design of new chaingear #1042 New registry UI #1041 Delete registry only when it is paused #1040 Multistep registry creation on UI #1039 Save registry ABI into the blockchain. Категарически #1038 Signing account do not chooses properly #1037 ABI do not resolve given ipfs hash #1036 Cannot add records if registry fee has been changed from non zero ETH #1035 Add registryID as field of registry contract #1034 Add stand-alone initialization of schema to registry #1031 Update UI for chaingear app #1029 Add shares logic for registry #1027 Add entry creation policy logic to registry #1025 Split registry creation and deploy in 3 stagess #1024 Sprint 20 report #1023 Upgrade migration for async/await and add migrations for schemas #1020 Fix burning/deletion of token/entry in chaingear/registry contracts #1019 Upgrade docs for 0.1 Euler release #1018 Upgrade application with more contracts data #1017 Fix application logic for most compatibility with contracts #1016 Refactoring of chaingear\u0026rsquo;s web3 app #1015 Gitcoin minutes first post #1014 Upgrade project after code review #1012 Upgrade project after code review #1011 Update Chaingear UI concepts #1008 Prepare project to audit #996 Security audit of chaingear\u0026rsquo;s contracts #994 Random tests failing with raw truffle test command #992 Update NatSpec in all contracts #990 Allow change of Registry name #989 Create issues for community in gitcoin #988 Add EntryCore example with field uniqueness check #987 Check funds before deleting entry in Registry #986 Display registry symbol in registry list #985 Chaingear kovan unstable deployment #984 Publish sprint 12 Changelog #983 Integrate initial chaingear app with cyb #982 Review chainger initial release by ha #981 Draw logo and patern for Chaingear #979 Upgrade web3 app with initial release #978 Create a landing page for chaingear project #977 Integrate Etherscan verification #975 First side code review of chaingear #972 Integration of whitelist entry policy to Registry #971 Integration of IPFSeable to Registry #970 Integration of IPFSeable to Chaingear #969 get contracts for address #966 unical record field in array #965 Deploy chaingear contracts to Kovan testnet #962 Add Changelog for Sprint 9 #961 Initial release of chaingear #960 Initial gas tests for Chaingear/Rs and evaluation of cost #959 Refactoring for Chaingear/Rs #958 Improve access logic for Registry #957 Improve access logic for Chaingear #956 Write basic tests for Chaingear #955 Write basic tests for Registry #954 Perfomance testing scenario for cyberd #953 Perfomance testing of PoA networks #952 Update Library #951 Distinct field for registry constructor as option #948 Implement funding for chaingear/Rs #947 Add entries funding to registries base #946 Implement 721\u0026rsquo;s cross-integration between chaingear and registries #945 Integrate ERC721 to Registry base #944 Integrate ERC721 to chaingear #943 Provide documentation for Chaingear contracts in NatSpec #942 Provide documentation for Registry contracts in NatSpec #941 Reduce js file size #940 Code generation base validation #939 Save abi to ipfs node not only local cache #938 Setup truffle\u0026rsquo;s documentation for chaingear/Rs #937 Develop App Registry for CYB #936 Research on ERC 721 integration to chaingear/Rs entries #935 Improve docs for Chaingear project #934 Setup Registry with basic logic #933 Add registration to RR for basic logic of Registry contract base #932 Setup documentation for Registry and Entries CRUD pipeline #931 Setup chaingear (RoR) contract with basic logic #930 Migrate old chaingear to a new project #927 Change Button Placement (Put to the Header) #919 Integrate with Etherscan #916 Create decentralized data storage #914 Develop new frontend #913 Develop new centralized data storage #912 Finalize data structure #911 Finalize application form development #910 Develop an administration interface #909 Invalid toml file #884 Invalid toml file #883 Setup CI with data validation #871 Invalid toml file #859 Invalid toml file #858 Invalid toml file #857 Invalid toml file #856 Invalid toml file #855 Invalid toml file #854 Invalid toml file #853 Invalid toml file #852 Invalid toml file #848 Invalid toml file #812 Invalid toml file #811 Initial version of registries #792 Invalid toml file #783 Invalid toml file #782 Invalid toml file #781 Invalid toml file #780 Invalid toml file #779 Invalid toml file #778 Invalid toml file #777 http://toastycoin.com/ #776 https://www.citadel.ink/ #775 https://cyber.fund/system/Oracles_Network #760 omega.one - 2018 #742 Nebulas - TBA #740 https://cyber.fund/system/Solar_Bankers #734 https://github.com/TokenBnk/ #733 Solarbankers - 21\u0026frasl;11 #732 Tokenbnk - 30\u0026frasl;11 #731 Metronome.io #730 https://bitcoingold.org/ #729 MakerDAO - Dec 17 #718 Truebit #717 https://www.sweetbridge.com - 17.11 #714 Metronome - March 2018 #713 http://fragmented.world - TBA #712 http://quickblocks.io - TBA #711 http://lightstreams.network/ - Q2 2018 #710 https://wepower.network/ #709 https://dharma.io ICO date TBA #708 Pre-Sale add please from 30th October to 3rd November #705 Blockstack - 13 Nov - open-source, contract to come #685 Mobius - 8 Nov Open source/contract to come #684 FundRequest - 20 Nov #683 Add navigation to Active, Upcoming, Anticipated and Successful on Radar page #682 Resolve why some projects are displayed twice on Radar #681 Find transformation manager for Chaingear #674 Ocean protocol #660 Develop scripts for export Chaingear to Google Spreadsheet #637 Move data from Google Spreadsheet to Chaingear #636 Kill submit form on site #635 Monthly report \u0026ldquo;Decrypted\u0026rdquo; or \u0026ldquo;Unfiated\u0026rdquo; #634 Raiden Network - 18 Oct #614 Andaction #610 True Flip Markets #603 EAS #601 Publica - 25 Oct #580 Quantstamp - 12\u0026frasl;11 #579 True Flip #529 Remove all ICO data for Contingency on website #511 Raiden Network Oct - ? #510 FansUnite #509 PROPS project - 20 Nov #508 Leverj - 7 Nov - Open source/contract to come #507 https://decent.ch/ #506 ICON 20 Oct #505 Livepeer #504 https://protos.tokenhub.com/ 25 Sept pre-ICO / 17 Oct ICO #503 https://biocoin.bio/ru 9 Nov #502 Climatecoin 1 Nov #501 Kyber Network ICO over #483 Verif-y - 25 Oct #481 Brickblock 31 Oct #476 ChainLink #475 Solidified #472 Moneypot 17 Sept #471 Zephyr 6 Oct #470 Correct ICO time for Paragon #466 WePower Network - ICO planned on February 1st, 2018 #457 Render 5 Oct #456 Mercury Protocol - 25 Oct - open code, contract to come soon #455 Zen Protocol #454 plasma.io #453 dharma.io - 2018 #452 WanChain 3 Oct #451 ChainLink 19 Sept #450 ties.network 21 Sept #449 Sweetbridge #448 Aventus - closed #447 DOVU.io #446 Airswap - 10 Oct - code partially closed #445 BitJob ICO ongoing #444 Graft.network #443 Gimli 18 Sept #442 The cyber Fund website does not display any changes #440 Starbase 27 Sept #435 Resolve comments to submissions #434 Grid+ / 30 Oct #433 FaceCoin #432 AirToken 19 Sept #428 Flovio #427 Goldmint 17 Sept #426 Atlant.io ongoing #425 Streamr - 12 Oct - code partially closed #424 Doc.ai 28 Sept #417 **https://databrokerdao.com/ 18 Sept pre-ICO #416 **swap.tech #415 Lendroid #414 Bloom #413 Etherparty 1 Oct #412 AutoNomic #411 Aidos Kunen #410 QRL #409 Metaverse #408 FunFair #407 Paragon 15 Sept #406 Zeppelin OS #405 Polkadot #404 https://neo.org/ #403 Aion #402 Filecoin #239 0x project #226 Migrate escrow and proof from Stats to escrow in Ballances #214 rexmls.com #213 Create google excel sheet with all tokens with their decimals #212 Move ICO Submit to ICO Stats #203 Concept first post-ICO report #201 propy.com #200 coindash.io #198 MyBit #197 district0x #196 Выборка проектов для отчета за июнь #195 Update Post-ICO data #183 DAO Casino #176 EOS #167 Finish Aeternity Crowdsale #165 Tezos #164 AdChain #163 OmiseGo #162 Civic #158 Status #138 SONM #137 Bancor draft #136 Cofound.it #122 Starbase #117 Final fraft Starbase #108 BAT #103 Pre-draft BAT #102 Setup link checker #98 Add data label #97 https://cyber.fund/EMC #96 Bancor #94 Pre-draft Bancor #93 Mysterium #92 Непонятно как они оказались в Радаре (внизу) #89 Fix first price and date #74 add missing icons #68 crowdsale times #46 Fix incorrect Storj cap calculation #42 Quality report calculation #32 Move aliases.CurrencyName to a token.token_name #31 Links for Stellar #29 Clean up API and source data #28 Clear garbage systems #27 Fix incorrect Cap due to wrong supply #26 Chaingear Init #25 Sync users with dev #24 Autoupdated assets don\u0026rsquo;t star system #23 How to add tokenless protocols? #22 List of systems to rename #21 Change address/path for generated API #20 Regeps for systems in Satoshi•Fund #16 Fix currencies names #15 BitBTC icon #14 Add icons for BitAssets #13 Blockchain IDs for rated systems #12 Chaingear landing #11 Chaingear docs #10 Fix rating for ✪✪ systems #9 Reconsile Coinmarketcap names #8 Rename Objects and Arrays #7 Update rating #6 Merge dublicates #4 One chain - one folder #3 Switch to TOML #2  Merged pull requests:\n Chaingear\u0026rsquo;s EVM 0.1 Euler Release #1056 (litvintech) Rebuild chaingear #1021 (litvintech) UPD config.yml knowledge -\u0026gt; wiki #1013 (SaveTheAles) Review by anton #1009 (AnthonyAkentiev) Update landing according to new design #1007 (SaveTheAles) landing remaking #1006 (SaveTheAles) 996 refactoring before audit #1004 (litvintech) remove debugger #1003 (vstavetski) 996 refactoring before audit #1002 (litvintech) fixes #992 #995 (rsercano) Setup landing page for Chaingear #991 (SaveTheAles) Initial release #980 (litvintech) Improved docs for chaingear #976 (litvintech) 954 basic tests for registry #968 (hleb-albau) NatSpec descriptions for .chaingear and .registry #967 (SaveTheAles) Chaingear and Registry tokenized linking #964 (litvintech) Add class diagramm of Chaingear.sol #950 (SaveTheAles) ENSF noties #949 (SaveTheAles) Update chaingear.json #929 (ninjascant) Add: Lightstreams #928 (ninjascant) Block #926 (ninjascant) Add: Marcelo #925 (ninjascant) Add: Kryll_io #924 (ninjascant) Update: KERBEROS #923 (ninjascant) Add: KERBEROS #922 (ninjascant) Add: Block #921 (ninjascant) Add: BharathTrade #920 (ninjascant) Add: OnLive #917 (ninjascant) Add: PlayBets #897 (goloschaingear) Add: Naviaddress #896 (goloschaingear) Update Dether.toml #892 (mohdether) Add: ADAMANT #890 (ninjascant) Add: Neunet #889 (ninjascant) Add: MyWish #888 (ninjascant) Add: MyTrackNet #887 (ninjascant) Add: Movement App #886 (ninjascant) Update: ATFS Project; convert to new data structure #885 (ninjascant) Add: MindSports #882 (ninjascant) Add: MediBloc #881 (ninjascant) Add: e-Chat ICO #880 (ninjascant) Add: Lockcoin #879 (ninjascant) Add: GraphGrail Ai #878 (ninjascant) Add: GOALBONANZA #877 (ninjascant) Add: DropDeck #876 (ninjascant) Fix headline #875 (ninjascant) Fix chaingear.json #874 (ninjascant) Add: VRTworld #873 (goloschaingear) Add CI and data validation #872 (abitrolly) Add: BlockNum #869 (goloschaingear) Update Adshares ICO end date #868 (jzemlo) Blockarray #867 (ninjascant) Update: BANKEX #866 (goloschaingear) Update: BANKEX #865 (goloschaingear) Add Karbo logo #860 (ninjascant) Add: TrakInvest #851 (goloschaingear) Update Cryptics.toml #850 (halsoi) Update Dether.toml #849 (mohdether) Add new data structure #847 (ninjascant) Add new structure template #846 (ninjascant) Add: new data structture template #845 (ninjascant) Add: TrakInvest #844 (goloschaingear) Add: MARK.SPACE #843 (ninjascant) Add: Legacy #842 (ninjascant) Add: Kr8os #841 (ninjascant) Add: JibrelNetwork #840 (ninjascant) Add: iungo #839 (ninjascant) Add: InsurePal #838 (ninjascant) Add: HOQU #837 (ninjascant) Add: GraftNetwork #836 (ninjascant) Add: DFS #835 (ninjascant) Add: DAXT #834 (ninjascant) Add: SOLA #833 (ninjascant) Add: DADI #832 (ninjascant) Add: CycloShieldCoin #831 (ninjascant) Add: Cryptopus #830 (ninjascant) Add: CryptoAlias #829 (ninjascant) Blockarray #828 (ninjascant) Blockarray #827 (ninjascant) Add: Chainium #825 (ninjascant) Add: Cardstack #824 (ninjascant) Add: Bottos #823 (ninjascant) Add: Blockmesh #822 (ninjascant) Add: Blocklancer #821 (ninjascant) Add: BankEx #820 (ninjascant) Add: ATFS Project #819 (ninjascant) Add: AdMine #818 (ninjascant) Add: Aditus #817 (ninjascant) Add: Karbo #816 (goloschaingear) Add: TradePlayz #815 (goloschaingear) Add: TokenGo #810 (goloschaingear) Add: DAXT #809 (goloschaingear) Add: RaidenNetwork #790 (goloschaingear) Add: DCX #785 (goloschaingear) Add: CLN #774 (ninjascant) Add: DCX #773 (ninjascant) Add: Volk #772 (ninjascant) Add: Polkadot #771 (goloschaingear) Change dates #770 (Bilous4singree) Add: xChange logo #769 (ninjascant) Add: xChange #768 (ninjascant) Add: xChange #767 (goloschaingear) BitClave TokenSale Update #766 (mike-tih) Add: TSSToken #765 (goloschaingear) Add: SophiaTX #763 (goloschaingear) Add: SMMarket #762 (goloschaingear) Add: ParetoNetwork #761 (goloschaingear) Update: chaingear.json #759 (ninjascant) Add: WePower #758 (ninjascant) Add Experty logo #757 (ninjascant) Update: chaingear.json #756 (ninjascant) Add: TokenBnk #755 (ninjascant) Update: chaingear.json #754 (ninjascant) Add: Game Machine #753 (ninjascant) Add: DaoPlayMarket 2.0 #752 (ninjascant) Add: Blockarray #751 (ninjascant) Update: chaingear.json #750 (Protectorofcode) Add: Expert #748 (goloschaingear) Add: Debitum #747 (ninjascant) Add: BitcoinGold #746 (ninjascant) Update: chaingear.json #744 (ninjascant) Update: chaingear.json #743 (ninjascant) Add: Neuromation #741 (goloschaingear) Add: Rentberry #739 (ninjascant) Add: RightMesh #738 (ninjascant) Add: SelfKey #737 (ninjascant) Add: StopTheFakes #736 (ninjascant) Add: VinChainToken #735 (ninjascant) Update: chaingear.json #728 (Protectorofcode) Update: chaingear.json #727 (Protectorofcode) Update: chaingear.json #726 (Protectorofcode) Update: chaingear.json #725 (Protectorofcode) Update: chaingear #724 (Protectorofcode) Update: chaingear.json #722 (Protectorofcode) Update Opporty.toml #721 (Protectorofcode) Add: wysToken #720 (ninjascant) Add: Bloom #719 (goloschaingear) Update: chaingear.json #716 (ninjascant) Add: NAU #715 (ninjascant) Update: chaingear.json #707 (ninjascant) Update: chaingear.json #706 (ninjascant) Add: Dogezer #704 (ninjascant) Add: BitClave #703 (ninjascant) Add: AppCoins #702 (ninjascant) Add: Blockstack #701 (ninjascant) Update: chaingear.json #700 (ninjascant) Update: chaingear #699 (Protectorofcode) Add: Confideal #695 (ninjascant) Update toml. #693 (Bilous4singree) Update: chaingear.son #692 (ninjascant) Rega #691 (ninjascant) Delete: Bitnation #690 (Protectorofcode) Update: Gizer #689 (Protectorofcode) Rega #688 (ninjascant) Rega #687 (ninjascant) Add: Leverj #686 (ninjascant) Add: FansUnite #680 (ninjascant) Add: IACCrowdsale #679 (ninjascant) Add: SimpleToken #678 (ninjascant) Add: MBCH #677 (ninjascant) Add: Universa #676 (ninjascant) Add: AntiBureaucracy #675 (ninjascant) Add: Lamden #673 (ninjascant) Add: Rega #672 (ninjascant) Update: chaingear.json #671 (ninjascant) Update: Polkadot #670 (ninjascant) Update: RaidenNetwork logo #669 (ninjascant) Update: chaingear.json #668 (Protectorofcode) Update: chaingear.json #667 (Protectorofcode) Update: chaingear.json #666 (Protectorofcode) Raiden2 #664 (ninjascant) Add: RaidenNetwork #662 (ninjascant) Add: E4ROW #661 (Protectorofcode) Add: chaingear.json #659 (Protectorofcode) Update Fidcom.toml #658 (Bolikus) Add: Sense #657 (ninjascant) Add: DalaToken #656 (ninjascant) Add: Prizm #655 (Protectorofcode) Add: Nimiq #654 (Protectorofcode) Add: Real #653 (Protectorofcode) Add: Propy #652 (Protectorofcode) Add: Qointum #651 (Protectorofcode) Update: chaingear.json #650 (Protectorofcode) Add: Equibit #649 (Protectorofcode) Add: Vega Fund #648 (Protectorofcode) Update: chaingear.json #647 (Protectorofcode) Add: Leviar Coin #646 (Protectorofcode) Add: TrueBit #645 (Protectorofcode) Add: Agrello #644 (Protectorofcode) Update: chaingear.json #643 (Protectorofcode) Update: chaingear.json #642 (Protectorofcode) Add: Dether #641 (Protectorofcode) Update: chaingear.json #639 (Protectorofcode) Update: chaingear.json #638 (Protectorofcode) Update: chaingear.json #633 (Protectorofcode) Update: ARToken #632 (Protectorofcode) Update: chaingear.json #631 (Protectorofcode) Add: ARToken #630 (Protectorofcode) Add: KredX #629 (ninjascant) Add: Gimli #628 (Protectorofcode) Add: Ties Network #627 (Protectorofcode) Update: chaingear.json #626 (Protectorofcode) Update: Wanchain #625 (Protectorofcode) Add: Chimaera #624 (ninjascant) Update: Brickblock #623 (Protectorofcode) Update: chaingear.json #622 (Protectorofcode) Add: Divi Project #621 (Protectorofcode) Add: Gizer #620 (Protectorofcode) Update: chaingear.json #619 (Protectorofcode) Update: chaingear.json #618 (Protectorofcode) Add: Enigma #617 (Protectorofcode) Update: chaingear.json #616 (Protectorofcode) Add: Lendroid #615 (Protectorofcode) Add: FortySevenBank #613 (ninjascant) Update: chaingear.json #612 (Protectorofcode) Add: Pangea #611 (ninjascant) Update: chaingear.json #608 (Protectorofcode) Add: HeroCoin #607 (Protectorofcode) Add: ARToken #606 (Protectorofcode) Update: chaingear.json #605 (Protectorofcode) Update: Mercury Protocol #604 (Protectorofcode) Add: Dream Team #602 (Protectorofcode) Update: DMarket #600 (Protectorofcode) Add: Gaze Coin #599 (Protectorofcode) Add: MatchPay #598 (Protectorofcode) Add: Ripio Credit Network #597 (Protectorofcode) Add: Jibrel Network #596 (Protectorofcode) Add: Stimus #595 (Protectorofcode) Update: chaingear.json #594 (Protectorofcode) Add: Dome Platform #593 (Protectorofcode) Add: Rhea #592 (Protectorofcode) Add: Genesis Vision #591 (Protectorofcode) Add: Opporty #590 (Protectorofcode) Update: chaingear.json #589 (Protectorofcode) Fix True Flip Lottery Markets #588 (gamedevsam) Update: chaingear.json #587 (Protectorofcode) Update: Jincor #586 (Protectorofcode) Update: chaingear.json #585 (Protectorofcode) Add: Crypto Improvement Fund #584 (Protectorofcode) Update: chaingear.json #583 (Protectorofcode) Add: Zenome #582 (Protectorofcode) Update Privatix.toml #581 (devalexandr) Update Crypto 20.toml #578 (skolobov) Update: chaingear.json #577 (Protectorofcode) Add: MingoCoin #576 (Protectorofcode) Add: BioPayCoin #575 (Protectorofcode) Add: Sparc #574 (Protectorofcode) Add: DarfChain #573 (Protectorofcode) Add: Harbor #572 (Protectorofcode) Add: Udiar #571 (Protectorofcode) Add: Quantstamp #570 (Protectorofcode) Add: Fidcom #569 (Protectorofcode) Update Papyrus.toml #568 (ashwets) Add: Databroker DAO #567 (Protectorofcode) Add: Dinnerful Network #566 (Protectorofcode) Add: TripAlly #565 (Protectorofcode) Add: Lescoin #564 (Protectorofcode) Add: Hirematch #563 (Protectorofcode) Update: chaingear.json #562 (Protectorofcode) Add: CoinDrive #561 (Protectorofcode) Add: Auctus #560 (Protectorofcode) Add: Snip #559 (Protectorofcode) Update: chaingear.json #558 (Protectorofcode) Add: Papyrus #557 (Protectorofcode) Add: CarTaxi #556 (Protectorofcode) Add: Crypto 20 #555 (Protectorofcode) Add: SRG-Play\u0026amp;Earn #554 (Protectorofcode) Update: chaingear.json #553 (Protectorofcode) Add: Hacken #552 (Protectorofcode) Add: DLS Academy #551 (Protectorofcode) Add: Snovio #550 (Protectorofcode) Add: Acebusters #549 (Protectorofcode) Add: Relest #548 (Protectorofcode) Add: Soma #547 (Protectorofcode) Add: Ethbet #546 (Protectorofcode) Add: Stash #545 (Protectorofcode) Add: Privatix #544 (Protectorofcode) Add: Etch #543 (Protectorofcode) Add: Galactikka #542 (Protectorofcode) Add: Icon #541 (Protectorofcode) Update: chaingear.json #540 (Protectorofcode) Update: chaingear.json #539 (Protectorofcode) Update: Aion #538 (Protectorofcode) Update: chaingear.json #537 (Protectorofcode) Add: Crypto.tickets #536 (Protectorofcode) Add: Polkadot #535 (Protectorofcode) Add: Wanchain #534 (Protectorofcode) Update: chaingear.json #533 (Protectorofcode) Update: True Flip Lottery #532 (Protectorofcode) Update: chaingear.json #531 (Protectorofcode) Add: True Flip Lottery #530 (Protectorofcode) Update: Brickblock #528 (Protectorofcode) Update: Etherparty #527 (Protectorofcode) Update: Chaingear.json #526 (Protectorofcode) Add: Zen Protocol #525 (Protectorofcode) Update: Kyber #524 (Protectorofcode) Add: Livepeer #523 (Protectorofcode) Add: Internxt #522 (Protectorofcode) Add: Evr #521 (Protectorofcode) Add: Cove Identity #520 (Protectorofcode) Add: Alloy #519 (Protectorofcode) Update: chaingear.json #518 (Protectorofcode) Update: Cointingency #517 (Protectorofcode) Update: chaingear.json #516 (Protectorofcode) Update: ChainLink #515 (Protectorofcode) Update: Cointingency #513 (Protectorofcode) Update: Contingency #512 (Protectorofcode) Update: chaingear.json #500 (Protectorofcode) Add: Atlant #499 (Protectorofcode) Update: Crystal Clear #498 (Protectorofcode) Update: chaingear.json #497 (Protectorofcode) Add: Verif-y #496 (Protectorofcode) Add: AirSwap #495 (Protectorofcode) Add: ChainLink #493 (Protectorofcode) Add: Grid+ #492 (Protectorofcode) Update: Metaverse #491 (Protectorofcode) Update: Aira #490 (Protectorofcode) Update: Omega One #489 (Protectorofcode) Update: Adchain #488 (Protectorofcode) Update: Loopring #487 (Protectorofcode) Add: Loopring #486 (Protectorofcode) Add: Mercury Protocol #485 (Protectorofcode) Update: chaingear.json #484 (Protectorofcode) Add: RockChain #482 (Protectorofcode) Add: Mito #480 (Protectorofcode) Add: Hagglin #479 (Protectorofcode) Add: Flip Coin #478 (Protectorofcode) Add: VoteCoin #477 (Protectorofcode) Update: chaingear.json #474 (Protectorofcode) Update: Electroneum #473 (Protectorofcode) Please change the end date to 2017 10 31. #469 (asanezz7) Update: chaingear.json #468 (Protectorofcode) Update: Paragon ICO #467 (Protectorofcode) Update: chaingear.json #465 (Protectorofcode) Update: AntShares -\u0026gt; NEO #464 (Protectorofcode) Add: Quantum Resistant Ledger #463 (Protectorofcode) Update: BOScoin #462 (Protectorofcode) Add: Metaverse #461 (Protectorofcode) Update: Aidos Kuneen #460 (Protectorofcode) Add: Aidos Kuneen #459 (Protectorofcode) Add: Aion #458 (Protectorofcode) Add: OpenZeppelin #441 (Protectorofcode) Add: FaceCoin #439 (Protectorofcode) Update: chaingear.json #438 (Protectorofcode) Update: Starbase #437 (Protectorofcode) Update: chaingear.json #436 (Protectorofcode) Update: FunFair #431 (Protectorofcode) Update: chaingear.json #430 (Protectorofcode) Add: Funfair #429 (Protectorofcode) Update: chaingear.json #423 (Protectorofcode) Add: Cash Poker Pro #422 (Protectorofcode) Add: EventChain #421 (Protectorofcode) Add: LAToken #420 (Protectorofcode) Add: Rouge Project #419 (Protectorofcode) Add: Detector #418 (Protectorofcode) Add: Spheris #401 (Protectorofcode) Add: Graft #400 (Protectorofcode) Add: DomRaider #399 (Protectorofcode) Add: Crystal Clear #398 (Protectorofcode) Add: Matryx #397 (Protectorofcode) Delete: Kin #396 (Protectorofcode) Add CombiCoin #395 (Protectorofcode) Add: Paragon #394 (Protectorofcode) Update: chaingear.json #392 (Protectorofcode) Update: Kin #391 (Protectorofcode) Update: chaingear.json #390 (Protectorofcode) Update: Decentraland #389 (Protectorofcode) Update: Filecoin #388 (Protectorofcode) Update: chaingear.json #387 (Protectorofcode) Update: chaingear.json #386 (Protectorofcode) Add: Urbit #385 (Protectorofcode) Add: Streamr #384 (Protectorofcode) Add: Solar Bankers #383 (Protectorofcode) Add: Oracles Network #382 (Protectorofcode) Add: Omega One #381 (Protectorofcode) Add: Kyber #380 (Protectorofcode) Add: Etherparty #379 (Protectorofcode) Add: Doc.ai #378 (Protectorofcode) Add: Aira #377 (Protectorofcode) Update: Adshares #376 (Protectorofcode) Update: Indorse #375 (Protectorofcode) Update: Cindicator #374 (Protectorofcode) Pylon Network #373 (klenergy) Update: chaingear.json #372 (Protectorofcode) Add: AirToken #371 (Protectorofcode) Add: Modum #370 (Protectorofcode) Update: Viberate #369 (Protectorofcode) Update: chaingear.json #368 (Protectorofcode) Update: Mybit #367 (Protectorofcode) Update: Rex #366 (Protectorofcode) Update: chaingear.json #365 (Protectorofcode) Update: Filecoin #364 (Protectorofcode) Update: Dimcoin #363 (Protectorofcode) Update: Presearch #362 (Protectorofcode) Update: Jincor #361 (Protectorofcode) Update: Vibe #360 (Protectorofcode) Update: Stable #359 (Protectorofcode) Update: Everex #358 (Protectorofcode) Update: Enjin Coin #357 (Protectorofcode) Update: Tieron #356 (Protectorofcode) Update: chaingear.json #355 (Protectorofcode) Update: Indorse #354 (Protectorofcode) Update: chaingear.json #353 (Protectorofcode) Update: Gilgam #352 (Protectorofcode) Add: TenX #351 (Protectorofcode) Add: Stox #350 (Protectorofcode) Add: Pillar #349 (Protectorofcode) Add: Opus #348 (Protectorofcode) Add: OpenAnx #347 (Protectorofcode) Add: Make It Viral #346 (Protectorofcode) Update: IO Coin #345 (Protectorofcode) Add: Digital Developers Fund #344 (Protectorofcode) Add: Decentraland #343 (Protectorofcode) Add: Crypviser #342 (Protectorofcode) Add: Bitjob #341 (Protectorofcode) Add: Asch #340 (Protectorofcode) Add: adToken #339 (Protectorofcode) Add: AdEx #338 (Protectorofcode) Add: Disledger #337 (Protectorofcode) Update: chaingear.js #336 (Protectorofcode) Update: 0x #335 (Protectorofcode) Update: chaingear.json #334 (Protectorofcode) Add: Umbrella Coin #333 (Protectorofcode) Add: Trackr #332 (Protectorofcode) Update: Solar DAO #331 (Protectorofcode) Add: Solar DAO #330 (Protectorofcode) Add: Slot N Slot #329 (Protectorofcode) Add: Pylon Network #328 (Protectorofcode) Add: OpenZen #327 (Protectorofcode) Add: Neblio #326 (Protectorofcode) Add: Magos #325 (Protectorofcode) Add: Lordmancer #324 (Protectorofcode) Add: Lampix #323 (Protectorofcode) Add: Fijinto #322 (Protectorofcode) Add: Fluence #321 (Protectorofcode) Add: Electroneum #319 (Protectorofcode) Add: DMarket #318 (Protectorofcode) Add: Dimcoin #317 (Protectorofcode) Add: Crowdholding #316 (Protectorofcode) Add: Cindicator #315 (Protectorofcode) Add: aventus #314 (Protectorofcode) Add: Anryze #313 (Protectorofcode) Updating Indorse links \u0026amp; token sale details #310 (avadhootkulkarni) Update: chaingear.json #309 (Protectorofcode) Update: FileCoin #308 (Protectorofcode) Update: chaingear.json #307 (Protectorofcode) Update: Filecoin #306 (Protectorofcode) Update: chaingear.json #305 (Protectorofcode) Add: Spectiv #304 (Protectorofcode) Add: Presearch #303 (Protectorofcode) Add: Poet #302 (Protectorofcode) Add: Indorse #301 (Protectorofcode) Add: CoinDash #300 (Protectorofcode) Add: Adshares #299 (Protectorofcode) Add: 8 Curcuit Studios #298 (Protectorofcode) Update: chaingear.json #297 (Protectorofcode) Add: U.CASH #296 (Protectorofcode) Add: Silent Notary #295 (Protectorofcode) Add: MooseCoin #294 (Protectorofcode) Add: Kairos #293 (Protectorofcode) Add: Jincor #292 (Protectorofcode) Add: Gluon #291 (Protectorofcode) Add: DigiCoinMaker #290 (Protectorofcode) Add: Blocklancer #289 (Protectorofcode) Update: chaingear.json #288 (Protectorofcode) Update: Kickico #287 (Protectorofcode) Update: chaingear.json #286 (Protectorofcode) Update: Starbase #285 (Protectorofcode) Update: Starbase #284 (Protectorofcode) Update: 0x #283 (Protectorofcode) Add: Vibe Hub #282 (Protectorofcode) Add: Stable #281 (Protectorofcode) Add: Sift #280 (Protectorofcode) Add: Gamerbits #279 (Protectorofcode) Add: Coss #278 (Protectorofcode) Add: Centra #277 (Protectorofcode) Add: Bitsdigit #276 (Protectorofcode) We\u0026rsquo;ve updated some info. Please, update Kickico.toml #275 (KICKICOPR) Update: chaingear.json #274 (Protectorofcode) Update: Bitcoin Cash #273 (Protectorofcode) Update: chaingear.json #272 (Protectorofcode) Update: Bitcoin Cash #271 (Protectorofcode) Add: Bitcoin Cash #270 (Protectorofcode) Update: chaingear.json #269 (Protectorofcode) Update: Kuna #268 (Protectorofcode) Update: chaingear.json #267 (Protectorofcode) Cha #266 (Protectorofcode) Update: chaingear.json #264 (Protectorofcode) Update: Kuna #263 (Protectorofcode) Update: chaingear.json #262 (Protectorofcode) Update: Brickblock #261 (Protectorofcode) Add: Brickblock #260 (Protectorofcode) Add: Nimfamoney #259 (Protectorofcode) Add: Monkey Capital #258 (Protectorofcode) Add: Kuna #257 (Protectorofcode) Add: Enjin Coin #256 (Protectorofcode) Update: chaingear.js #255 (Protectorofcode) Update: chaingear.js #254 (Protectorofcode) Update: Kickico #253 (Protectorofcode) Update: Skycoin #251 (Protectorofcode) update logo skycoin #250 (Protectorofcode) Add: Prospectors #248 (Protectorofcode) Add: Nexxus Parthers #247 (Protectorofcode) Add: Embermine #246 (Protectorofcode) Add: BOScoin #245 (Protectorofcode) Add: Viberate #243 (Protectorofcode) Add: Kickico #242 (Protectorofcode) Update: Skycoin #238 (LucianMincu) Delete Scam: Kibo #237 (Protectorofcode) Add: FundYourSelf #236 (Protectorofcode) Add: Apptrade #235 (Protectorofcode) Add: Encryptotel #234 (Protectorofcode) Add: Veritaseum #233 (Protectorofcode) Add: ZrCoin #232 (Protectorofcode) Add: Chain of Points #231 (Protectorofcode) Add: Everex #230 (Protectorofcode) Add: Kibo Platform #229 (Protectorofcode) Update: Blockfreight #228 (Protectorofcode) Add: SlognCoin #227 (Protectorofcode) Add: Ziber #224 (Protectorofcode) Add: Tieron #223 (Protectorofcode) Add: Rex #222 (Protectorofcode) Add: 0x #221 (Protectorofcode) Add: Ethbits iTrade #220 (Protectorofcode) Add: Lunyr #219 (Protectorofcode) Add: CreativeChain #218 (Protectorofcode) Add: Suretly #217 (Protectorofcode) Update: Tezos #216 (Protectorofcode) Update: Mybit #215 (Protectorofcode) Update: TokenCard #211 (Protectorofcode) Update: Mysterium #210 (Protectorofcode) Update: Bat #209 (Protectorofcode) Update: Cofound #208 (Protectorofcode) Update: Bancor #207 (Protectorofcode) Update: Civic #206 (Protectorofcode) Update: Status #205 (Protectorofcode) Update: Mybit #202 (Protectorofcode) Add: District0x #199 (Protectorofcode) Add: Edgeless #194 (Protectorofcode) Add: LeoCoin #193 (Protectorofcode) Add: Ubiq #192 (Protectorofcode) Add: Numeraire #191 (Protectorofcode) Add: ZCoin #190 (Protectorofcode) Add: Nexus #189 (Protectorofcode) Add: MobileGo #188 (Protectorofcode) Add: MCAP #187 (Protectorofcode) Add: Komodo #186 (Protectorofcode) Update : Tezos #185 (Protectorofcode) Update: DaoCasino #184 (Protectorofcode) Update Time: Omise #182 (Protectorofcode) Update: Tezos #173 (Protectorofcode) Update: Sonm #170 (Protectorofcode) Add: Eos #168 (Protectorofcode) Update: Civic #166 (Protectorofcode) Update: Status #161 (Protectorofcode) Update fundrequest ico date #160 (karelstriegel) Update: Sonm #159 (Protectorofcode) Update: bancor #157 (Protectorofcode) Update: Bancor #156 (Protectorofcode) Update: Storjcoin X #155 (Protectorofcode) Add: OmiseGO #154 (Protectorofcode) Add: Populous #153 (Protectorofcode) Slight update to time (+4h) #152 (Razaberry) Update: Bancor #151 (Protectorofcode) Add: Kin #150 (Protectorofcode) Add: Bitquence #149 (Protectorofcode) Add: Monaco #148 (Protectorofcode) Update: Cofound #147 (Protectorofcode) Add: Ecobit #146 (Protectorofcode) Update: Aeternity #145 (Protectorofcode) Add: MyBit #144 (Protectorofcode) Update: Bat #143 (Protectorofcode) Add: 21Million #142 (Protectorofcode) Updated BNT sale date as per twitter annoucement #141 (Razaberry) Update: Bat #140 (Protectorofcode) Add: Cofound #139 (Protectorofcode) Update: DaoCasino #132 (Protectorofcode) Update: DaoCasino #130 (Protectorofcode) Add: Starbase #129 (Protectorofcode) Add: Civic #128 (Protectorofcode) New Bancor ICO start date: June 15 #127 (Razaberry) Add: Sonm #126 (Protectorofcode) Update: Voise #125 (Protectorofcode) Update: Tezos #124 (Protectorofcode) Add: Beth #123 (Protectorofcode) Add: Polybius #121 (Protectorofcode) Update: Status #120 (Protectorofcode) Update: Bancor #119 (Protectorofcode) Add: DCORP #118 (Protectorofcode) Add: Starta #116 (Protectorofcode) Add: Gilgam.es #115 (Protectorofcode) Add: Ark #114 (Protectorofcode) Add: Lykke #113 (Protectorofcode) Add: Bat #112 (Protectorofcode) Update: Mysterium #111 (Protectorofcode) Update: Storj #110 (Protectorofcode) Add: DaoCasino #109 (Protectorofcode) Fix link to Ripple web site #107 (abitrolly) Add: Mysterium #106 (Protectorofcode) Update: Storj #105 (Protectorofcode) BTCD - fix some links #99 (abitrolly) add bitworldvip #87 (bitworldvip) Update: Btsr, MassNetwork, Synereo, vDice #86 (Protectorofcode) add : Veltor, Voise, TokenCard #85 (Protectorofcode) add: Veltor #84 (Protectorofcode) Add: Tezos #83 (Protectorofcode) Bancor #82 (Protectorofcode) Add GBG #79 (xhipster) project update to seven blockchain systems #78 (agent725) adjusted end-date for fundraiser, and subtle changes #77 (agent725) Upcoming Musicoin Genesis #76 (musicoiner) Internet of Coins TOML specification #75 (agent725) Add FundRequest Dapp #73 (karelstriegel) logo change #72 (jamesgroton) Update vDice.toml #70 (jamesgroton) Inchain`s ICO dates changed #69 (trummax) Big mistakes about the starting date. #66 (zikilemini) Added Beyond The Void #64 (zikilemini) Total Supply Update #63 (chris4210) Update AntShares.toml from the Antshares Team #60 (PeterLinX) Update AntShares.toml from Antshares team #59 (DavidthePangwaer) Add files via upload #58 (JasonMcz) creating HONG profile #56 (hongcoiner) Add AntShares #55 (PeterLinX) Okcash Integration #54 (oktoshi) Add EnergyCoin #53 (coin1hub) Adding BTSR and ICOO assets #52 (OpenLedgerDev) Gh pages #51 (ElephantDevelopment) We are using Bitbucket instead of Github now. #50 (justindonnaruma) Add Rise.Vision Foundation #49 (justindonnaruma) Add MINEUM #48 (antho281) Dash Forum migrated to new link #47 (thelazier) fix link name, hashtag #45 (thelazier) Fix some consensus descriptions #43 (xhipster) Add a Gitter chat badge to README.md #41 (gitter-badger) Update: Consensus data #40 (xhipster) Update: Consensus data for 6 systems #39 (xhipster) Update: Consensus data for 10 systems #38 (xhipster) Update: Consensus data for 10 systems #37 (xhipster) Update: All consensus data #36 (xhipster) Update Dash Whitepaper #34 (thelazier) Update Dash.toml #33 (thelazier) Update github link and remove redundancies #30 (johansten) Update NuBits.toml #19 (CoinGame) Update NuShares.toml #18 (CoinGame) Link updates #17 (phideas) aliases #1 (ghost)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/chaingear/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing list  @litvintech - contracts developer/maintainer @pechalka - web3 app developer/maintainer  "
    },
    {
        "uri": "/docs/chaingear/whitepaper/",
        "title": "",
        "description": "",
        "content": " Chaingear The consensus computer driven database framework litvintech and xhipster, Developer\u0026rsquo;s Board Members, cyber•Congress Position With the rising of decentralized computing and web3 becoming, we need fundamental peace of web3 infrastructure as decentralized databases. But as web3 different to web2 there are new approaches and challenges for their development and operating. In this paper, we are describing principles of Chaingear and their Ethereum PoC - novel Ethereum\u0026rsquo;s open-source framework for developing tokenized databases based on smart-contracts with custom data schema and CRUD+TF operations for interacting with.\nPrinciples of Chaingear Chaingear is a set of smart contracts which operating in consensus computer with following principles:\n Databases creates by user createDatabase call for Chaingear witch mints database-linked NFT token for user and deploys database with support of CRUD+TF operations. Token controls adminship of database. Admin initializes database with given table/tables data schema. Database admin may set user permissions for entry creation and fee for adding. Each entry in database linked to NFT token (primary key) which grants a set of rights for token-entry operation as UPDATE/DELETE and TRANSFER/FUND. Chaingear for given platform acts as Consensus Computer Driven Database as a Service Application specific business logic should be available to operate on top of database/databases.  Chaingear on EVM, 0.1 Euler PoC Chaingear  Chaingear is database of database which allow deploy new databases from there and creates an associated token for adminship. Chaingear allow deploys different types of databases with defined functionality with connects with databases builders. Database Builder is a fabric of databases of given type. Databases may have their unique code base as an extension to the basic database. Database-token may be transferred, sold/traded alongside with their right adminship. Chaingear have fees for database creation. Chaingear have benefitiaries which may claim collected fees proportional to their shares.  Database  A database is a smart contract which defines NFT tokens linked to entries. User creates database with given name and token symbol for entries. After deploy database admin initializes database with data schema table/tables and this allows them or/and other users to create a systematic collection of data, where rights to operations with entry defined by entry-token ownership. Entries data lives in Schema contract. Each entry may be publicly funded, an entry-token owner may claim collected funds. Database admin may set policy for entry creation: {OnlyAdmin, Whitelist, AllUsers} and fee for the entry-token creation and next claim fees. Also admin may set multiple database\u0026rsquo;s beneficiaries which may claim collected fees proportional to their shares.  Tokenization and CRUD+TF  Operation CREATE initialize empty entry and mints token. READ are publicly available with token as primary key. Each entry-token grants token-based access to UPDATE/DELETE operations on entry. DELETE operation burns token and deletes entry. Each entry-token may be transferred with TRANSFER with rights to tokenized operations. Each entry-token may be FUND. CLAIM operation for allocated funds available for token owner.  Persistent sources and deterministic regeneration For interaction with databases, we need ABI for contracts and source code for verification. ABIs and sources may be saved on some nodes and accessed with IPFS, but this access is not guaranteed. The Ethereum itself is persistent storage, and it\u0026rsquo;s a point to save ABIs and source code which guarantees databases operation. Our solution is save in database contract schema\u0026rsquo;s definition which allow deterministically regenerate ABI and source code of schema.\nGas    Operation Gas Cost ETH, 10 Gwei/gas     createDatabase (chg) ~3.5M ~0.035   initializeDatabase (db) ~2-3M ~0.02-0.03   createEntry (db+st) ~250-400K ~ 0.0025-0.004   readEntry* (st) -/* -/*   updateEntry (st) ~140-250K ~0.0014-0.0025   deleteEntry (db+st) ~180-250K ~ 0.0018-0.0025   transferFrom (db) ~100K ~0.001    Workflows Chaingear setup and Database creation/schema initialization pipeline Database CRUD/Entry-token pipeline Chaingear\u0026rsquo;s Database-token pipeline Inheritance Chaingear inheritance Database inheritance web3 Application General | | | |-|-| |||\nDatabase | | | |-|-| |||\nDatabase Deploy and Schema designer | | | |-|-| || |\nFuture work and releases  Design and architecture, security Optimization of data writes and reads, column storage Advanced indexes. Release on new virtual machine  Development Maintainers: @litvintech, @xhipster, @pechalka\n"
    },
    {
        "uri": "/docs/chaingear/contracts/",
        "title": "",
        "description": "",
        "content": " Contracts Overview Design rationale Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user\u0026rsquo;s Database).\nIn reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases.\nIn reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract.\nThis brings us to tokenized (C RU D) operations (and inner in Schema) in Database and public (C R UD) plus tokenized (CR U D) Storage operation.\nChaingear inheritance Database inheritance /chaingear  Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database\u0026rsquo;s owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.  /builders  DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database\u0026rsquo;s builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.  /common  Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract.\n IChaingear\n IDatabase\n IDatabaseBuilder\n ISchema\n  /databases  Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized (C RU D) actions, after creation of token and empty database object, user should initialize them (CR U D) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds.\n DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.\n  /schemas  Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public (C RU D) actions for users and inner (C RU D) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.  EntryInterface interface (should be implemented in user EntryCore contract) interface ISchema { function createEntry() external; function deleteEntry(uint256) external; }  Example Schema pragma solidity 0.4.25; import \u0026quot;../common/ISchema.sol\u0026quot;; import \u0026quot;../common/IDatabase.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/ownership/Ownable.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\u0026quot;; contract Schema is ISchema, Ownable, SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed; struct Entry { string name; string manifest; string extension; string content; string logo; } Entry[] public entries; IDatabase internal database; constructor() public { _registerInterface(INTERFACE_SCHEMA_ID); database = IDatabase(owner); } function() external {} function createEntry() external onlyOwner { Entry memory m = (Entry( { name: \u0026quot;\u0026quot;, manifest: \u0026quot;\u0026quot;, extension: \u0026quot;\u0026quot;, content: \u0026quot;\u0026quot;, logo: \u0026quot;\u0026quot; })); entries.push(m); } function readEntry(uint256 _entryID) external view returns ( string, string, string, string, string ) { uint256 entryIndex = database.getIndexByID(_entryID); return ( entries[entryIndex].name, entries[entryIndex].manifest, entries[entryIndex].extension, entries[entryIndex].content, entries[entryIndex].logo ); } function updateEntry( uint256 _entryID, string _name, string _manifest, string _extension, string _content, string _logo ) external { database.auth(_entryID, msg.sender); uint256 entryIndex = database.getIndexByID(_entryID); Entry memory m = (Entry( { name: _name, manifest: _manifest, extension: _extension, content: _content, logo: _logo })); entries[entryIndex] = m; } function deleteEntry(uint256 _entryIndex) external onlyOwner { uint256 lastEntryIndex = entries.length - 1; Entry memory lastEntry = entries[lastEntryIndex]; entries[_entryIndex] = lastEntry; delete entries[lastEntryIndex]; entries.length--; } }  "
    },
    {
        "uri": "/docs/chaingear/drafts/contracts/",
        "title": "",
        "description": "",
        "content": " Contracts Overview Design rationale Main design principle goes from ERC721 NFT tokenization of Databases (in Chaingear/Database of databases) and Entries (in custom user\u0026rsquo;s Database).\nIn reason of Databases tokenization in Chaingear which allows token holder acts as administrator of their Databases, Chaingear acts to Database as owner, which sets token holder as administrator on creation phase, changes administrator when holder transfers token to another user, and transfers ownership when user unregister Database in Chaingear, giving them full control to contract. Database deep-linked to Chaingear database token. In other words, token ownership means control of Database. Also, Chaingear supports multiple Database Builders (fabrics of databases of given type), and allows Chaingear owners provide different kind and versioning of Databases.\nIn reason of providing user functionality to describe their custom database data structures/schema and CRUD operations, the user creates their custom smart-contract, which implements the ISchema interface. This contract acts as inner storage, defines schema, and Database acts them on token operations (creating and deleting). A user may deploy erroneous or vulnerable Schema contract, but this should not crash Chaingear-Database NFT-token logic and Database inner entry NFT-logic too. Even if this happens Database crashing should not affect Chaingear/metadatabase contract. We proceed from the premise that the creator of the database (administrator) is positive and it does not make sense for them to break his database by initializing it with an incorrect contract.\nThis brings us to tokenized (C RU D) operations (and inner in Schema) in Database and public (C R UD) plus tokenized (CR U D) Storage operation.\nChaingear inheritance Database inheritance /chaingear  Chaingear allows any user to create his own database. Building fee is collecting by new database creation. All builded databases are tokenized with ERC721 NFT token standard and saved in Chaingear metadatabase with db metainformation. Creator of database may transfer tokenized ownership of database and destroy database with token burning. Tokenized databases Entries may collect funds by users and Database\u0026rsquo;s owner may claim them. Chaingear supports multiple benefitiaries witch have access to collected fees from databases creation. Also allows for owner add multiple database builders contracts based their on versioning or/and functionality.  /builders  DatabaseBuilder contains the code of specified version of Database. This code used by Chaingear for Database creation and deploy process. DatabaseBuilder should be added with specified version and description to Chaingear database\u0026rsquo;s builders inner list. Chaingear contract should be added as allowed caller to DatabaseBuilder with reason to allow creation calls only by Chaingear contact.  /common  Safe allows creator contract transfer ETHs to them and claim from, accounting logic holded by owner contract.\n IChaingear\n IDatabase\n IDatabaseBuilder\n ISchema\n  /databases  Database contract witch tokenize entries as NFT tokens via ERC721 standard. Users can create tokenized empty entries according to entry access policy setted in Database. Database provides tokenized (C RU D) actions, after creation of token and empty database object, user should initialize them (CR U D) in Storage. Also users can fund entries with ETHs which send to DatabaseSafe with which owner of entry token can claim funds.\n DatabaseAccessControl holds logic of controlling database and accessing to entries creation. Policy options to entries creation are OnlyAdministrator, Whitelist, AllUsers. Chaingear acts as owner of Database and creator of database acts of administrator with separated policies to Database functions.\n  /schemas  Schema partially code-generated contract where database creator setup their custom entry structure and setters/getters. Schema then initializes in Database by their creator (as admin) and completes Database setup process. Provides public (C RU D) actions for users and inner (C RU D) tokenized actions for Database. Database goes as owner of contract (and acts as proxy) with entries creating, token-based transferring and deleting.  EntryInterface interface (should be implemented in user EntryCore contract) interface ISchema { function createEntry() external; function deleteEntry(uint256) external; }  Example Schema pragma solidity 0.4.25; import \u0026quot;../common/ISchema.sol\u0026quot;; import \u0026quot;../common/IDatabase.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/ownership/Ownable.sol\u0026quot;; import \u0026quot;openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\u0026quot;; contract Schema is ISchema, Ownable, SupportsInterfaceWithLookup { bytes4 constant internal INTERFACE_SCHEMA_ID = 0x153366ed; struct Entry { string name; string manifest; string extension; string content; string logo; } Entry[] public entries; IDatabase internal database; constructor() public { _registerInterface(INTERFACE_SCHEMA_ID); database = IDatabase(owner); } function() external {} function createEntry() external onlyOwner { Entry memory m = (Entry( { name: \u0026quot;\u0026quot;, manifest: \u0026quot;\u0026quot;, extension: \u0026quot;\u0026quot;, content: \u0026quot;\u0026quot;, logo: \u0026quot;\u0026quot; })); entries.push(m); } function readEntry(uint256 _entryID) external view returns ( string, string, string, string, string ) { uint256 entryIndex = database.getIndexByID(_entryID); return ( entries[entryIndex].name, entries[entryIndex].manifest, entries[entryIndex].extension, entries[entryIndex].content, entries[entryIndex].logo ); } function updateEntry( uint256 _entryID, string _name, string _manifest, string _extension, string _content, string _logo ) external { database.auth(_entryID, msg.sender); uint256 entryIndex = database.getIndexByID(_entryID); Entry memory m = (Entry( { name: _name, manifest: _manifest, extension: _extension, content: _content, logo: _logo })); entries[entryIndex] = m; } function deleteEntry(uint256 _entryIndex) external onlyOwner { uint256 lastEntryIndex = entries.length - 1; Entry memory lastEntry = entries[lastEntryIndex]; entries[_entryIndex] = lastEntry; delete entries[lastEntryIndex]; entries.length--; } }  "
    },
    {
        "uri": "/docs/chaingear/drafts/help/development/",
        "title": "",
        "description": "",
        "content": " Configuring, development and deploying Install npm i  Linting: solium -d contracts  Testing: ganache-cli -p 8545 truffle test  Deploying (for example kovan): truffle migrate --network=  "
    },
    {
        "uri": "/docs/chaingear/drafts/overview/",
        "title": "",
        "description": "",
        "content": " Overview This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT.\nYour creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.\nFeatures Chaingear  Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database  Custom database  Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)  Chaingear UI (browser/stand-alone web3 DApp)  Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS  "
    },
    {
        "uri": "/docs/chaingear/drafts/pipelines/",
        "title": "",
        "description": "",
        "content": " General Chaingear/Database pipeline Database CRUD/tokenized Entry/Funds pipeline Chaingear tokenized Database pipeline "
    },
    {
        "uri": "/docs/chaingear/help/development/",
        "title": "",
        "description": "",
        "content": " Configuring, development and deploying Install npm i  Linting: solium -d contracts  Testing: ganache-cli -p 8545 truffle test  Deploying (for example kovan): truffle migrate --network=  "
    },
    {
        "uri": "/docs/chaingear/overview/",
        "title": "",
        "description": "",
        "content": " Overview This project allows you to create your own Database of general purpose entries on Ethereum blockchain. Entry type is defined during creation, so you can put into entry any custom logic you want (validation, entry-level permission control). Entries are tokenized as NFT.\nYour creating your database in Chaingear - metadatabase, which are one point of access to all databases. Databases on chaingear level are tokenized as NFT. Chaingear is most expensive database, so you should pay for your database and entry creation.\nFeatures Chaingear  Metadatabase with Databases entries, where each entry are ERC721 token Fee-based Database creation Creating Databases with different functionality Token-based ownership/administration for Database Funding in ETH for Database  Custom database  Custom data structure for Database (Schema) Each Entry is ERC721 token Fee-based Entry creation Token-based ownership Entry management Entry creation policies (Administrator, Whitelist, AllUsers)  Chaingear UI (browser/stand-alone web3 DApp)  Web3/Metamask/Truffle/IPFS based Full Chaingear control interface Full custom Database control interface Schema smart-contract code generation and deploying on client Databases ABI and metainformation savings in IPFS  "
    },
    {
        "uri": "/docs/chaingear/pipelines/",
        "title": "",
        "description": "",
        "content": " General Chaingear/Database pipeline Database CRUD/tokenized Entry/Funds pipeline Chaingear tokenized Database pipeline "
    },
    {
        "uri": "/docs/chaingear/whitepaper/",
        "title": "",
        "description": "",
        "content": " Chaingear The consensus computer driven database framework litvintech and xhipster, Developer\u0026rsquo;s Board Members, cyber•Congress Position With the rising of decentralized computing and web3 becoming, we need fundamental peace of web3 infrastructure as decentralized databases. But as web3 different to web2 there are new approaches and challenges for their development and operating. In this paper, we are describing principles of Chaingear and their Ethereum PoC - novel Ethereum\u0026rsquo;s open-source framework for developing tokenized databases based on smart-contracts with custom data schema and CRUD+TF operations for interacting with.\nPrinciples of Chaingear Chaingear is a set of smart contracts which operating in consensus computer with following principles:\n Databases creates by user createDatabase call for Chaingear witch mints database-linked NFT token for user and deploys database with support of CRUD+TF operations. Token controls adminship of database. Admin initializes database with given table/tables data schema. Database admin may set user permissions for entry creation and fee for adding. Each entry in database linked to NFT token (primary key) which grants a set of rights for token-entry operation as UPDATE/DELETE and TRANSFER/FUND. Chaingear for given platform acts as Consensus Computer Driven Database as a Service Application specific business logic should be available to operate on top of database/databases.  Chaingear on EVM, 0.1 Euler PoC Chaingear  Chaingear is database of database which allow deploy new databases from there and creates an associated token for adminship. Chaingear allow deploys different types of databases with defined functionality with connects with databases builders. Database Builder is a fabric of databases of given type. Databases may have their unique code base as an extension to the basic database. Database-token may be transferred, sold/traded alongside with their right adminship. Chaingear have fees for database creation. Chaingear have benefitiaries which may claim collected fees proportional to their shares.  Database  A database is a smart contract which defines NFT tokens linked to entries. User creates database with given name and token symbol for entries. After deploy database admin initializes database with data schema table/tables and this allows them or/and other users to create a systematic collection of data, where rights to operations with entry defined by entry-token ownership. Entries data lives in Schema contract. Each entry may be publicly funded, an entry-token owner may claim collected funds. Database admin may set policy for entry creation: {OnlyAdmin, Whitelist, AllUsers} and fee for the entry-token creation and next claim fees. Also admin may set multiple database\u0026rsquo;s beneficiaries which may claim collected fees proportional to their shares.  Tokenization and CRUD+TF  Operation CREATE initialize empty entry and mints token. READ are publicly available with token as primary key. Each entry-token grants token-based access to UPDATE/DELETE operations on entry. DELETE operation burns token and deletes entry. Each entry-token may be transferred with TRANSFER with rights to tokenized operations. Each entry-token may be FUND. CLAIM operation for allocated funds available for token owner.  Persistent sources and deterministic regeneration For interaction with databases, we need ABI for contracts and source code for verification. ABIs and sources may be saved on some nodes and accessed with IPFS, but this access is not guaranteed. The Ethereum itself is persistent storage, and it\u0026rsquo;s a point to save ABIs and source code which guarantees databases operation. Our solution is save in database contract schema\u0026rsquo;s definition which allow deterministically regenerate ABI and source code of schema.\nGas    Operation Gas Cost ETH, 10 Gwei/gas     createDatabase (chg) ~3.5M ~0.035   initializeDatabase (db) ~2-3M ~0.02-0.03   createEntry (db+st) ~250-400K ~ 0.0025-0.004   readEntry* (st) -/* -/*   updateEntry (st) ~140-250K ~0.0014-0.0025   deleteEntry (db+st) ~180-250K ~ 0.0018-0.0025   transferFrom (db) ~100K ~0.001    Workflows Chaingear setup and Database creation/schema initialization pipeline Database CRUD/Entry-token pipeline Chaingear\u0026rsquo;s Database-token pipeline Inheritance Chaingear inheritance Database inheritance web3 Application General | | | |-|-| |||\nDatabase | | | |-|-| |||\nDatabase Deploy and Schema designer | | | |-|-| |||\nFuture work and releases  Design and architecture, security Optimization of data writes and reads, column storage Advanced indexes. Release on new virtual machine  Development Maintainers: @litvintech, @xhipster, @pechalka\n"
    },
    {
        "uri": "/docs/client/",
        "title": "",
        "description": "",
        "content": " Ista qua aera Tetigisse hac duc omnipotens urbis per sapiente Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nvar mnemonicPcmcia = file; if (bookmarkMultiprocessing) { core.intranetDigitize = menu(vdslWordart(enterprise, dviRealityTeraflops)); } else { portal_socket.jsp_shareware_digital = multicasting(component_uml); memory.ppc_title_hit(lunWebFormat + fontSmartphoneView, tween * default_hard, 5 + laptopMethod); wddm_tablet_null.widgetFileRate(3, leakMaskResponsive); } var siteRjSoftware = installer; html.text = address + nasSystemDns;  Lac roratis Diomede Aut in vivitur quam ibi is veniebat Herculis mihi hominem! In matrem gesserit manus coniuge silva pectore simul nec felix in haud ostendit lacrimavit mora. Digna adspice temptata, Palaestina armis at crura centum tellus ni tibi Amphiona mansit, bello tibi pugnat fuit. Sidera nec ambo temporis summe tempore, falsa committere, pater horrenda, erat ast cadunt preces.\n Ventorum pariturae cum discors fit dabat inguina Armeniae viscera Et monitusque boum misereri Obliquaque primasque suae  Ovaque in tendens tibi Iovis iuga Vagatur laboribus vocandus honorque segnior inclinat petentes manere ut terram fundit; sunt. Pressit eodem inmotae quasque linguam, sub famem animos dei nocte futura Laconide India. Posset iter nata negarit limina latus postquam serior, cum dic area iamdudum non! Et curaque me illo: addidit tuam, Cerealia, fila undae Ilithyiam proceresque tegens numero dominaeque regna humanis. Multo adstringit hirsutaque crimine postquam perfudit illis, a mutua, memorant.\nHis nocte ipse cum oculorum recepta ignorat Minos ad carmina exire studiosior Talia tamen, est a hi de quae ipsa et quoniam. Se victus at unca tantae eurus Euippe Bacchumque vocantia.\nUllum frena statione de at praeferret classi Acarnanum iacuit lacertis gemino; ad caperet finiat! Utque videt ingemuit Dulichium paravi portaque te et, tot ab caesariem sumit, vias in rerum te.\n"
    },
    {
        "uri": "/docs/cyb/app-guidelines/",
        "title": "",
        "description": "",
        "content": " DApp guidelines @asadovka\nWhat is App? App in Cyb is a one or multi page application. It can be a simple html file as a frontend and may include smart contract logic as a backend. Apps should be available through IPFS hash.\nApp structure Cyb CLI can automatically generate structure for your App. All you need to do is just type some commands, come up with a name and develop!\nApp requirements We set limitations of computation resources usage for each app.\n less then 5% of CPU usage less then 10% of RAM usage  App development Here we describe how to generate initial app structure.\n Install the latest version of CYB package npm install -g cyb\n Select the path where you want to store your app. For example /Desktop/My_apps cd username/Desktop/My_apps\n Enter the name and generate the structure of the app. A folder with all necessary components will be created cyb init appname\n Go to the app folder and link your app with your Cyb cyb link\n Open the Appstore in CYB. You will see your app on «Your app» page\n  You can also use our Help App (cyb://.help/create) for more info.\nApp deployment When you are ready with development of your app you can easely publish it to the DApp Store so every user of Cyb will see it. Open your app, click on \u0026ldquo;deploy\u0026rdquo; button and enter IPFS hash of your app. Sign the transaction - your app will be registred in Chaingear. And that is it!\nApp design App design process follows Web3 design principles.\nState rules We use simple colored states for states of transactions or operations:\n mempool/failed - red confirmed/reverted - yellow finalized/succesful - green  Data visualization Data should be visualised in a simple and attractive way. No overloaded plots an diagrams, we use animation instead.\nBlockchain objects presenting Blockchain data is too complicated and sometimes not obvious for people. Thus we use adaptive tricks to make work process more convenient:\n Logical grouping for objects. Every app page has common groups of data (general, blockchain specific) for inheritance of views and better navigation or data observing. Classical accounting terms used for balance and cashflow operations. Blockahains use econimic principles for interaction between subjects thus we can describe such processes in established terms. Robohash logo for contracts entities. Contracts can act by themself, have and algorithms, so it\u0026rsquo;s more natural to perceive them like robots instead of pieces of code.  "
    },
    {
        "uri": "/docs/cyb/cyb/",
        "title": "",
        "description": "",
        "content": " Cyb: web3 browser @xhipster @asadovka\nConcept. Definitions are work in progress.\nCurrent implementation is not in comply with spec yet\nAbstract Cyb is a friendly software robot who helps you explore the universes. Put it simply it just a web3 browser. At the very beginning Cyb is focusing on developers and advanced blockchain users who are able to work with private keys and transactions. But we see how Cyb becomes friendly for everyone who wants to interact with consensus computers in a web of the third generation. This new web is designed to free developers from outdated things such as html and v8. So developers can use any markup, execution and rendering engine they wish. That is why we don\u0026rsquo;t focus on implementation of mentioned things. Instead this paper shows implementation agnostic concepts of browser that are simple enough to be adopted by web3 developers. Initially we design Cyb for conventional desktop browsing. But suggested concepts can be easily used for mobile, voice, VR and robotics implementations.\nIntroduction Current state of web3 experience is non satisfactory. We still didn\u0026rsquo;t meet any piece of software that is able to deliver deep and emotional web3 experience. So we decide to bring to the table one contender that strictly follows web3 principles defined by ourselves ;-) In a rush for this passion we define the following web3 apps which we believe together implement the full web3 vision in the context of a browsing for web3 agents and app developers:\nCLI Shell Here are the default UX elements, that Cyb uses to provide basic web3 UX:\n Navigation bar - search field, back \u0026amp; forward buttons App Bar - list of pinned favourites apps ID Bar - main identity data State Bar - node connection statuses  .cyb Cyb has a lot of user and technical settings. They are implemented in the core browser app - .cyb:\n main.cyb: main page for every joe path.cyb: user\u0026rsquo;s navigation history txq.cyb : user\u0026rsquo;s transaction activity pins.cyb: pinned user\u0026rsquo;s favourite apps and pages connect.cyb: connection manager\n root.cyb: cyb root registry\n help.cyb: cyb educational library and feedback mechanism\n dev.cyb: web3 development tool with support of contracts\n keys.cyb: keystore interface\n sign.cyb: phishing resistant signer for messages and transactions with scheduler\n wallet.cyb: universal wallet\n feed.cyb: notification \u0026amp; feed app\n access.cyb: permission manager that respects agents\u0026rsquo; resources\n  Apps Main apps for initial web3 experience\n .cyber: cyberd node manager and app for link chains + - apps.cyber: search appstore - .ipfs: ipfs node manager and agent experience .eth: ethereum node manager + ens resolver .chaingear: all the things chaingearable .wiki: wiki indexator  All this apps are considered as core apps and are included in every Cyb distribution. Let us describe in details every app as a pure concept.\n.main Purpose of the main app is to make agent happier in a moment it returns for surfing and between experiences. Main page of the browser consists of three main elements:\n search bar: provides all search functions relevance bar: the most relevant cyberlinks for a particular agent footer: cyberlinks to ecosystem resources which are important for education and contribution  .path Navigation bar in Cyb is based on the following elements:\n back button - returns user to the previous state of web3 agent search bar - provides direct access to certain state star button - allow users to pin cyberlinks forward button - brings user to the future state based on Cyb prediction  Search bar is used to browse web3. With the help of DURA with knowledge of application involved (.) it can get content across different content addressing protocols such as IPFS, DAT, SWARM, and inside blockchains, tangles and DAGs thus forming heterogeneous environment of web3. In web3 vision doc we describe in details a concept of web3 browsing based on DURA specs.\nThat is, in web3 appending \u0026ldquo;dot\u0026rdquo; works very different in comparison with web2. Dot is literally a search query to a particular app that also has a content address in heterogeneous network. All symbols after \u0026ldquo;dot\u0026rdquo; make a map with content address of an app in root registry, and all data before \u0026ldquo;dot\u0026rdquo; is a query parameter to an app.\n\u0026lt;illustration\u0026gt;  For example:\n.help query will open Cyb help app. chaingear.help will open chaingear info page in the help app. Query without \u0026ldquo;dot\u0026rdquo; will be automatically redirected to search in cyberd (Note: queries without dot is synonym to \u0026lt;your-query\u0026gt;.cyber).\nEmpty query always leads to the main page. . query returns a root registry that is being used by default in Cyb.\n\u0026lt;api-definition\u0026gt;  All cyberlinks that was requested by agent can be accessed using path app that is integral part of Cyb experience.\n.connect In web3 all data has the state, so it become easier to navigate through it and make agent experience better. To be sure that you are working with actual state Cyb needs to manage connection to web3 providers.\nOur purpose is to build web3 browser that is agnostic from addressing, identity and consensus protocols. But currently we use ipfs, parity-light and cyberd nodes to show off possible experience at early stage of web3 development without necessity to connect to web3 provider at all (be your own web3 provider) for basic needs such as popular static content surfing and simple transfers of tokens.\n\u0026lt;illustration\u0026gt;  Cyb is hiding all complexities of web3 connections under one colorful indicator that range from green to red. Ideally it works like indicator of internet connection we all used to see in smartphones. Connection indicator cyberlinked to a connect app that is integral part of id bar. It gives an ability for an agent to understand status of connections and chose web3 providers.\n\u0026lt;api-definition\u0026gt;  Ultimate purpose of connect is to remove necessity of agents to manually switch between networks. Agent do not need to think about switching across networks. It is a goal of app developers and browser vendors to define an approach that allow seamless interaction during web3 experience with all network magic happens underneath. Cyb is developing in a way that allow async interactions with several peer-to-peer networks in an app context.\n.keys Purpose of id bar is to enable the concept of identity. Using identity an agent is able to authenticate messages and sign transactions in web3. Cyb assumes that an agent interacting with web3 is using active identity, but offers ability to change id of a signed transaction during signing.\nAgent understand which id is active using identicon. Cyb computes unique and deterministic identicons for every id, but offer agent to set any identicon for local pleasure. Clicking on id bar allow agent to choose active identity from a keys app.\n\u0026lt;illustration\u0026gt;  Keys app is inherent component of id bar and embedded in Cyb. This app allows to store cryptographic secrets. Think of it as lastpass you don\u0026rsquo;t need to trust that is able to compute different addresses, one time passwords and signatures in the context of an app.\nThe following convention is used for keys:\nid: String, chainId: Number keystore: Promise \u0026lt;String\u0026gt; mnemonic: String derivationPath?: Promise \u0026lt;String\u0026gt; otherAddresses: Array \u0026lt;String\u0026gt; privateKey: String publicKey: Promise \u0026lt;String\u0026gt; type: String subtype: String  The following API is being used to programmatically interact with id bar:\nsetDefaultId(addressIndex: Number): Promise \u0026lt;Boolean\u0026gt; sign(transactionObject: Object): Promise \u0026lt;String\u0026gt; signMessage(messageObject: Object): Promise \u0026lt;String\u0026gt; verifyMessage(verificationObject: Object): Promise \u0026lt;Boolean\u0026gt;  .cyber It happens then agent knows some content address but have no idea in which network it can be retrieved as well as what app can deal with it. That is why Cyb has default integration with cyber [CYBER] protocol. Cyb append .cyber app for all request without a dot. .cyber is an app that has simple interface to cyberd, which returns prediction of related cyberlinks thus agent can get required resource directly through peer-to-peer network. Cyb has a setting of default search engine, thus an agent can plug a search she wants.\n\u0026lt;api-definition\u0026gt;  .pins App bar is a place where user can quickly get access to most used web3 objects. User can pin such objects by clicking on button \u0026ldquo;favourite\u0026rdquo; on navigation bar and then it will appear in app bar. Cyberlink manager is an attached app that allow agents to group and tag pins.\n.sign .sign allows users to sign messages and transactions in a way that brings web3 experience to the whole new level.\nBrowser use embedded app for signing transactions so user can be always sure that transaction details are valid. In a web2 there is no inherent mechanism to be sure that overlay of an app is produced by a browser and not an app itself. Cyb solves this problem deterministically generating background and sound of overlay window in a way that an underlying app cannot know the seed for generating desired sound and visual pattern. The user need to remember its unique pattern once to safely interacting with different apps including not so trusted.\nAnother problem we are approach to solve with .sign is deferred transactions. Cyb has its own address for which an agent can delegate some rights. Using this API app developer can create a logic that allow create and execute complex sequences of transactions client side. Since inception of Ethereum we sign thousands of transactions and miss even more. That is why we believe this feature is critical for awesome web3 experience.\n.crr According to [3 rules of root registry]() every developer can deliver best possible experience for their agents. That is why we want to mix the best from every word in our worlds in our implementation of root registry. To bring better user experience about 3k of records will be cybersquatted to align interests of existing app developers and agents who look for a beautiful, simple and trustful experience.\n.crr is a potpourri of the most well known concepts consolidated under one namespace! Let me introduce what is included in the shake:\n programming languages: up to 200 names common programs: up to 100 names tokens: Up to 1k names top-level domains: up to 300 names top english words: up to 1k names utf symbols: up to 300 names  Initially cyber•Congress will own all this cybersquatted records. In order to improve probability of adoption of .crr cyber•Congres will distribute this names to original app developers based on proof of dns mechanism. That is, names for programming languages, common programs, tokens and top-level domains will be distributed based on a proof of dns according to verified registry produced by cyber•Congress.\nTop english words and utf symbols will be distributed using competitions, grants and awards produced by cyber•Congress.\nInitially unregistered names in .crr will be distributed under flat fee for cyb root registry owner in Chaingear. We are going to start from 1 ETH for every name and will see will it be enough to protect from abusive squatting or not. It is possible that we will switch to auction form of distribution in a future.\n.cyb Extension over .crr.\nAdded fields: logo, tagline, manifest, meta, code, crr.\nAs result it become suitable to be an app store for browser. Appstore treats pinned apps as installed if at leas one permission is granted.\n.access Permission management is of paramount importance in the process of safe application distribution. We want to improve upon 3 critical aspects of permission management in web:\n app authentication resource management dynamic permissions  App authentication is hard in web2. You need somehow know the origin and this is practically hard in a face of government level adversaries, than you must compute hash of received file and compare it with a file hash received from origin. Due to practical complexity nobody do that. In web3 if you know that address is correct authentication is done automagically. That is why browser can easily verify that permission is granted for expected app and not malicious.\nResource management was not in place. In web2 all permission systems was primarily build around a concept of granting access to a particular data which browser has access to. While this approach find itself useful it just not enough to run any application from untrusted developers. Computing resources has fundamental value now, thus must be carefully managed and metered. In web3 its weird that any untrusted app can eat all resources of a machine in no time. Moreover, if an application is executed in a sandbox all we need to feel ourselves safe (in addition to authenticated permissions) is ensure that app do not eat more resources than expected. Libraries that help app developers to mine some proof-of-work algorithms using visitor machine become ubiquitous. Practically that means that in addition to shity ads web2 users will experience even more worse web experience: greedy, slow and battery consuming apps are coming. The answer to this upcoming problem in a browser permission system which is able to produce bounds on apps consumption of fundamental resources such as cpu, gpu, ram, storage and broadband. We believe that resource management must be in the core of web3 application engine. We are currently doing research on how that can be implemented: containerisation seems to be low hanging fruit that can be embedded right into web experience.\nPermission affordances. Current permission systems are static in a sense that browser provide limited set of predefined apis. Cookies, location, camera, microphone, sound and notifications: that is very limited set of things browsers can afford. Permissions of a third party developers are not native for a browsers either. Browser just don\u0026rsquo;t care about what data with which apps agent want to share. We ask ourselves what if a browser can ask apps what kind of permissions they can provide thus exposing this permission system to any other apps? We believe this approach will allow web3 developers provide experience inaccessible for previous architectures.\n.feed Notification panel displaying all pending transactions and web3 events corresponding to certain account. Settings button leads to settings page where user can manage connection to IPFS, Ethereum and Cyber nodes (local or remote ways).\n.ipfs This app is a third party app developed by IPFS Shipyard. This is very basic app for interacting with ipfs.\n.eth Simple app which ger DURI requests and route requests to ethereum node (contracts, transactions and blocks). Else resolve ENS.\n.wallet We believe that transfer of tokens is very basic experience in a web3 thus want to provide embedded in browser wallet app as soon as possible. Thus we consider either to develop our own bicycle or partner with some 3d party wallet developer.\n.dev Developers experience is critical for the whole web3 adoption. This app helps to develop and publish web3 apps.\n.cg Chaingear is an app that help developers create ethereum based CRUD databases. We believe it will help developers to adopt web3 easier the same they MySQL helped to site developers in the very beginning of web.\n.help Help is a two way help application. Using this app cyb helps agents to use itself. Using .help agents help Cyb evolve.\nAs an open source project we are welcome for contributions. Gitcoin is an excellent instrument that we use for delegating tasks for community a processing payments for completed ones.\nWe have our vision of how to develop browser and what kind of features develop first. But we give an opportunity for community to decide and vote with tokens what kind of browser we need to see in near future. Our product Chaingear is also made for this.\nWe use user\u0026rsquo;s feedback to make products better. So we provide options for bug reporting and feedback leaving on every page.\n.settings Cyb settings\nSaga on privacy and anonymity \u0026hellip;\nOn censorship resistance \u0026hellip;\n"
    },
    {
        "uri": "/docs/cyb/dura/",
        "title": "",
        "description": "",
        "content": " DURA: a missing piece for \u0026ldquo;The Great Web\u0026rdquo; @xhipster cyberCongress\nAbstract Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs based on desired properties of \u0026ldquo;The Great Web\u0026rdquo; some of them has been defined in an article An idea of decentralized search for web3. DURA is being implemented in web3 browser Cyb. We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach.\nIntroduction Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA.\nWe can ask ourselves why after 40 years of ubiquitous computer movement we still don\u0026rsquo;t have simple common knowledge about what file extensions must be used with what software?\nDistributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme then the scheme which has been used in a conventional web. In it\u0026rsquo;s root it doesn\u0026rsquo;t requires central authorities such as ICANN. Also, proposed approach do not depends on any blockchain based registry such as ENS, Chaingear or Handshake though. Only agents define which content type is being processed by which app. Using \u0026ldquo;Cascading Name Registries\u0026rdquo; technique the principle can be practical enough to become universal without harming a will of agents.\nDURA scheme [protocol]://[query].[app]  We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture. Further we discuss some details of a proposed linking convention.\nProtocol dura://  It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3. If a browser do not know the protocol handler of a link it can look up the handler in a root registry.\nQuery dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense it is not, as it offers visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other.\nApp The key in our proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered:\ncom:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  A name must be letter, number or hypen.\nPurpose of a root register is bring to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained.\ndura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs  This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network.\nImplementation in browsers  Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure.  One of the implementation is a cyb root registry\nCascading name registries\nDURA extensions A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable and logical behavior for parsing and rendering of requests.\nThe following extensions can demonstrate the flexibility of an approach:\n app navigation app state local paths link chains URL parameters  Key principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry.\nApp navigation Traditionally it is up to developers how to structure navigation within an app.\nKeyword: - / after the main body\nExample: cybernode.ai/dashboard\nApp state It can be useful to have simple convention on how to reflect state of an app on a particular block.\nKeyword: - !\nExample: cybernode.ai/dashboard!1567485\nLocal paths Dura can be easily extended with conventional requirement of pointing to a certain place in a current device directory structure:\nKeyword: - / before the main body\nExamples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth\nLink chains Keyword: - @ between DURA statements\nExample: xhipster.eth@cybercongress.ai\nKey-value parameters Keywords: - ? start of kv params - \u0026amp; start of kv clause - = denote key and value\nExample: - page?name=ferret\u0026amp;color=purple\nReference  Idea of web3 Interplanetary File System Cyb  "
    },
    {
        "uri": "/docs/cyb/web3-vision/",
        "title": "",
        "description": "",
        "content": " DURA: a missing piece for web3 @xhipster cyberCongress\nEarly draft for web3 summit. Looking for a feedback.\nAbstract Originally an idea of web3 was inspired by Gavin Wood in 2014. A vision of Gavin was around 4 implementable concepts: content addressing, cryptographic identities, consensus computing and browsers. In parallel an idea of Interplanetary File System has been developed by Juan Benet. IPFS creates a foundation for web3: a system of content addressing and cryptographic identities. Since 2014 consensus computing has suffered insanely rapid development so one more missing piece is also in place. Still missing piece is a web3 browsing. Some projects such as Metamask has demonstrated a taste of web3. But one critical component in terms of browsing is just not there. URL scheme is outdated in terms of desired web3 properties and needs a drop in replacement. In this paper firstly we discuss necessary properties that we expect from web3. Based on this analysis we propose DURA scheme aka Distributed Unified Resource Address as drop in replacement for URLs that is being implemented in web3 browser Cyb. We believe DURA is a dump enough scheme (your captain) which can bring up basic consensus across web3 browser vendors due to simplicity, openness and protocol agnostic approach.\nIntroduction Conventional protocols of the Internet such as TCP/IP, DNS, HTTPS and URL brought a web into the point there it is now. Along with all benefits they has created this protocols brought more problem into the table. Globality being a key property of the the web since inception is under real threat. Speed of connections degrade with network growth and from ubiquitous government interventions into privacy and security of web users. One property, not obvious in the beginning, become really important with everyday usage of the Internet: its ability to exchange permanent hyperlinks thus they would not break after time have pass. Reliance on one at a time internet service provider architecture allow governments censor packets. This fact is the last straw in conventional web stack for every engineer who is concerned about the future of our children. Other properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have ability to work with the state it has and after acquiring connection being able to sync with global state and continue verify state\u0026rsquo;s validity in realtime while having connection. Now this properties offered on app level while such properties must be integrated into lower level protocols: into very core of web3.\nSpeed Usability researches state that interactions that do not make sense in 100 milliseconds are considered as slow by an agent. Achieving such instant speeds is nearly impossible in the current stack of protocols. The following generation of the web must enable instant responses user requests. Necessity for lookup a location of resource using remote machine is an obvious bottleneck for reaching desired properties.\nGlobality Current internet is starting to split into regions mutually inaccessible for each other. China is de facto such a region. Some countries are very close to joining the club. It is of paramount importance that web3 would remain global even in the face of government level adversaries.\nSecurity Current web applications are still in its infancy in term of permission abilities. Security of web apps is a very complicated topic. But one thing is obvious: it is hard to setup a secure system with third party apps without built in authentication system of the code being run on client machine. Current system of mutable resource location based on certificate authorities can not be safe by design.\nPermanent We are all experience broken links. IPFS has immunity to this issue. As long as you keep a file anybody can access it using globally defined immutable in time address of this file computed from the file itself.\nMesh ready Current internet paradigm is based on 1 internet provider paradigm. That is basically a bad shit, because in general even if you have 2 or more internet connection like wifi and lte your device and/or operation system don\u0026rsquo;t allow you to get the full possibilities of connectivity enforcing you to use only one connection at a time. Another major bad shit in current internet architecture is that your device is treated as leech by default. Every device keeps data necessary to being useful for surround devices. Huge portion of our network traffic goes not from origin server but from ISP cache. That means that changing a paradigm we can get to very different topology where our neighbors are our web3 providers.\nVerifiability \u0026hellip;\nPrivacy and Anonymity \u0026hellip;\nOffline \u0026hellip;\nRealtime \u0026hellip;\nRoles In a web of the third generation roles are not like in a web2. There is no clear split on users, internet providers and sites. Key difference is such that interactions can happen truly peer to peer the one can be sovereign enough to be their own internet.\n Apps. Any content hash can be an app if it is known how to parse it. Agents. An app can become an agent if she can prove that she exist by digital signature. Providers. Any agent that is able to serve content can be web3 provider.  Content addresses To understand why they so important we need to understand a difference in foundational concept of web2 and web3.\nWeb2: Where =\u0026gt; What-How: You must know resource location on a particular server to retrieve it.\nWeb3: What =\u0026gt; How: Instead of location based paradigm web3 is based on the content addressing paradigm. Key point is that we do not need to have knowledge of resource location in order to link to an object. In a web3 the answer to the How is either local or blockchain based registry with simple map between input address and address of an app.\nCryptographic identities \u0026hellip;\nConsensus computers There are some very exhaustive articles around the topic of web3 which are really about consensus computing part of it.\nWorth to note that saying that any particular blockchain or even all blockchains altogether is web3 is like saying that databases is world wide web. Yes databases technology contributed to a development of www, but without several protocols this databases would not become interconnected through billions of web sites. Remember that in order to implement a vision of full web3 potential we need to find drop in replacement for every piece of current protocol stack: IP, TCP, HTTPS, DNS and URL. None of currently deployed blockchain technologies don\u0026rsquo;t have necessary properties to directly replace dinosaurs. I would say that distributed ledger technology is a better database stack for the upcoming web.\nDURA scheme Distributed Unified Resource Address or put simply DURA is a more simpler and trustful scheme that has been used in a conventional web. It doesn\u0026rsquo;t requires central authorities such as ICANN or others:\n[protocol]://[query].[root-app]/[navigation]  We believe that a term cyberlink can be used for DURA links in order to differentiate with hyperlinks of previous internet architecture.\nProtocol dura://  It is a local handler that every os can handle. Being fully optional it can be very important in the very beginning of web3.\nQuery dura://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  If a browser is able to understand in which network she can resolve this particular content hash it can resolve it without much ado. Though we expect that IPFS will be not the only system and it become practically hard to say with 100% certainty whether given hash is ipfs hash or swarm or torrent or some other address type. That is there the concept of a root registry came into the game. In some sense it serves as an alternative to a self describing scheme used in CIDs. In some sense its not as it offer visually more sound links for agents. We believe that the root registry and self description concepts are complementary to each other.\nRoot registry Current state of DNS root management is outdated. The most bad thing is that we still must to trust the most important things in our lives to strange organizations such as ICANN, IANA.\nWe can ask ourselves why after 40 years of ubiquitous computer movement we still don\u0026rsquo;t have simple common knowledge about what file extensions must be used with what software?\nOur proposal is a concept of a root register. Structure of root register is a simple map between short name and ipfs hash of a program that is being triggered:\ncom:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa io:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa exe:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa pdf:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa eth:QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa  A name must be letter, number or hypen.\nPurpose of a root register is to reach some very basic os and network agnostic agreement about what extensions with what programs must be used. Of course the problem with such registry is that it must be somehow and somewhere maintained.\nThree rules of a root registry  Software vendors must compete for a better root registry. Software vendors must add setting with a change of a root registry. Agents of browsers and operation systems must have ability to overwrite maps for local pleasure.  One of the implementation is a cyb root registry\nRoot registry app cyb://QmQLXHs7K98JNQdWrBB2cQLJahPhmupbDjRuH1b9ibmwVa.ipfs  This is an example of full DURA link that is able get hash of ipfs app in a root registry, than throw predicate into this app and get a desired resource from a peer to peer network.\nNote: need to add real case of ipfs DURA app being used in Cyb. Note: need to add real case on how web2 link can be resolved using DURA approach.  App navigation Traditionally its up to developers how to structure navigation within an app. But we believe that some scheme will be invented to differentiate statefull and stateless links as it is very important for\nDURA extensions A lot of cool stuff can be implemented using extensions. Extension is any symbol that adds predictable an logical behavior for parsing and rendering of requests.\nExamples: - local paths - connection links - URL parameters\nKey principle is that semantics is programmable and can be delivered from a distributed network using symbols that has been registered in a root registry.\nWhere extension Keyword: - / before content address is a local path\nExamples: /users/xhipster/cybernode.ai /ethereum/cybersearch.eth\nLinkchain extension Keyword: - @ between DURA statements\nExamples: xhipster.eth@cybercongress.ai\nNeed to find cyberlinks between two cyberlinks.\nReference \u0026hellip;\n"
    },
    {
        "uri": "/docs/cyberd/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Full Changelog\nImplemented enhancements:\n Rank calculation period automatic adjustment #142 RPC get cid rank endpoint #116  Fixed bugs:\n Error during rewards withdrawal #302 Finish Proof of Code genesis drop #294  Closed issues:\n Adjusting of link weight #330 Answer why CyberD is better for Web3 then Google #328 Exclude at the current stage the consideration of the behavioural factor in the search for ordinary users #327 New distribution #316 Create list of supported and tested GPUs #315 Update development environment documentation #311 Fix pictures in whitepaper #303 Cyberadmin telegram-bot for cyberd #281 Align current network capabilities with cyberCongress pricing model #262 Slow node start-up. #138  Merged pull requests:\n Fixes fatal mistake in distribution #348 (xhipster) Format hotfix #347 (xhipster) Edit GPU list according to @litvintech comments #345 (SaveTheAles) Change get-cyb description #344 (SaveTheAles) Final fixes of paper #334 (xhipster) update run_validator #325 (wimel) #320 add multisig guide create and send #324 (SaveTheAles) Some Dan\u0026rsquo;s fixes #323 (marzipanstar) Proposal of the new distribution #322 (xhipster) Updated docs for dev env setup #312 (litvintech) Add goveralls support for test coverage #305 (arturalbov)  v0.1.4 (2019-03-15) Full Changelog\nImplemented enhancements:\n Get supply #158  Fixed bugs:\n Consensus Failure #293 Infinity loop in rank end blocker if node was restarted before x00 blocks. #283 Centralized network communication #257  Closed issues:\n Enabled send #290 move debug logic to x/debug module #288 Add doc of using help feature of cli #287 Add doc about editing moniker and openning 26656 port. #282 Development start guide #78  Merged pull requests:\n 0.1.4 #298 (hleb-albau) #293 Handle bank delegation method in inmem index update mechanism #297 (hleb-albau) 138 links storage #295 (hleb-albau) #78 Dev Env docs #292 (hleb-albau) #290 Enable send #291 (hleb-albau) #288 Move debug code to x/debug #289 (hleb-albau) #158 Get supply #285 (hleb-albau)  v0.1.3 (2019-03-01) Full Changelog\nImplemented enhancements:\n Remove full index loading for next rank in link index #275 Enable governance module #193  Closed issues:\n Generate lottery results cmd #273 Can not explore existing account if it have not any outgoing transactions #238 distribution validator slashes don\u0026rsquo;t work in cybercli #237  Merged pull requests:\n minor docs reorg fixes #279 (SaveTheAles) #193 Enable governance module #278 (hleb-albau) Remove full index loading for next rank in link index #277 (arturalbov) #273 Generate lottery results cmd #274 (hleb-albau) add staging #272 (SaveTheAles) add folder removing #271 (SaveTheAles) Docs ci upd #270 (SaveTheAles)  v0.1.2 (2019-02-23) Full Changelog\nImplemented enhancements:\n Update to cosmos 0.32.0 #265 Download golang only once during docker build. #259 Do not calculate rank, if there is no new links on last window. #258 Http client only new links option for submit endpoint #254 Add fail at height debug flags #250 Extend isLinkExist endpoint with possibility not specify address param #242 Add staking/validators endpoint to node RPC #235 Add cyberd rest light-client to docker image #230 Improve building of links index for search queries #145 Webscoket API #76  Fixed bugs:\n Rank calculation failed: out of memory #264 Different bandwidth price on same block height #247 Consensus failure after node restart #243 Search returns 500 error when previously unexisted \u0026ldquo;from\u0026rdquo; CID added #241 Rest server blocks cli keystore file #233 Cannot interact with node #203 Update cyberd.ai #185 CI: Cyberd docker image building. Include genesis file #160  Closed issues:\n Add more seeds into initial config #244 Create awesome gif for readme #239 Launch 0.1.1 testnet #205 Cyberd release scheme. #180 Genesis state generator #92 Distribution #27 Ranking research #24 Define distribution in paper #5  Merged pull requests:\n 0.1.2 #269 (hleb-albau) Refactoring of search index. Fix links export #268 (arturalbov) Launch euler-2 testnet #267 (hleb-albau) #265 Update to cosmos 0.32.0 #266 (hleb-albau) Consensus failure after node restart #263 (arturalbov) Do not calculate rank, if there is no new links on last window. #261 (arturalbov) Client submit only new links flag #260 (hleb-albau) Improve building of links index for search queries #255 (arturalbov) #244 Add moon as seed node #253 (hleb-albau) #250 Add fail at height debug flag #251 (hleb-albau) #247 Different bandwidth price on same block height #248 (hleb-albau) #242 Extend isLinkExist endpoint with possibility not specify address #246 (hleb-albau) #242 Extend isLinkExist endpoint with possibility not specify address #245 (hleb-albau) Add staking/validators endpoint to node RPC #236 (arturalbov) Rest server blocks cli keystore file #234 (arturalbov) UPD run validator md #232 (SaveTheAles) Add cyberd rest light-client to docker image #231 (arturalbov) Fix docs #228 (arturalbov) upd run-validator.md #225 (SaveTheAles)  v0.1.1 (2019-01-31) Full Changelog\nFixed bugs:\n Error on replay with wrong app hash calculation (block #914381) #197  Closed issues:\n Mass testing of cyberd-testnet 0.1.1 #219 Export 0.1.1 genesis from 0.1.0 testnet. #215 Setup 0.1.1 chain params for staking, distr, slashing, mint modules. #201  euler-1 (2019-01-31) Full Changelog\nMerged pull requests:\n Euler 0.1.1 #223 (arturalbov) Fix import reader #222 (arturalbov) Landing update #220 (asadovka) DISCUSS: Chain params for 0.1.1 network #202 (hleb-albau)  euler-1.1-dev1 (2019-01-30) Full Changelog\nImplemented enhancements:\n Docker image with possibility to select compute unit #211  Fixed bugs:\n Link msg bandwidth cost doesn\u0026rsquo;t take into account links count #216  Merged pull requests:\n #215 Fix pou distribution uses share not percentage #221 (hleb-albau) #215 Fix gentx commands. #218 (hleb-albau)  euler-1.1-dev0 (2019-01-29) Full Changelog\nImplemented enhancements:\n Links Exporter #184  Fixed bugs:\n Fix validator manual #189 Change mint module to default cosmos module #181 Current Bandwidth do not respect price #168 negative bandwidnt #164 Wrong CYB allocation in Genesis #156 Update docker with 0.1.0 version #154 Move import_private command to keys subcomand #152 Handle import of ethereum privkeys with 0x #150  Closed issues:\n Fix typos #207 Update landing for 0.4 whitepaper #204 Update to tendermint v29.0 #187 Change Bandwidth Price to Average for 24h Sliding Window #179 High bandwidth cost for create validator msg #178 Bandwidth Specification Change #177 Add rpc endpoint to submit signed link and send messages #173 Tx size reduction: switch to more compact links tx encoding. #171 index entities count endpoint #165 Add ipfs hashes to release #161 Change token name from CBD to CYB in the testnetwork #157 Add more issues templates. #153 Add trust-node by default in cli #151 Numerous small fixes in whitepaper #89 Cyberd landing make up #36 Whitepaper 0.4 #25  Merged pull requests:\n CI: testnet ipfs files hashes #217 (arturalbov) WIP: CI Cyberd docker image building. Include genesis file #214 (arturalbov) #197 Error on replay with wrong app hash calculation #213 (hleb-albau) Links exporter #210 (arturalbov) R4R #181 Constant Block Reward #209 (hleb-albau) 157 change token protocol name #208 (hleb-albau) Fix typos get_CYB.md #206 (serejandmyself) R4R: #156 Add Missing euler tokens cmd #200 (hleb-albau) Update to cosmos-sdk v0.30.0 #198 (hleb-albau) Tx size reduction: switch to more compact links tx encoding #192 (arturalbov) Fix rank calculation context data #191 (hleb-albau) Important fixes in validators manual #190 (xhipster) Change Bandwidth Price to Average for 24h Sliding Window #188 (arturalbov) R4R Update cosmos to latest develop #186 (hleb-albau) #153 Add more issues templates. #183 (hleb-albau) #178 #168 Bandwidth price + Msg cost for non link txes #182 (hleb-albau) #173 Add rpc endpoint to submit signed link and send messages #174 (hleb-albau) Technical notes on euler release #169 (xhipster) Handle import of ethereum privkeys with 0x. Trust node by default #167 (arturalbov) #164 fix rpc negative bw #165 add index entities count endpoint #166 (hleb-albau) Move import_private command to keys subcomand #159 (arturalbov)  v0.1.0 (2019-01-06) Full Changelog\nImplemented enhancements:\n CID rank merkle proofs #133 Simple go cyberd client #122 Add remainig bandwidth endpoint #109 Get rid of RPC proxy #94  Fixed bugs:\n Cannot check balance using cli #149 Index out of range for cids with not calculated rank yet. #139 Account inmem balances should be updated by wrapping accountKeeper #99  Closed issues:\n Cli: Add possibility to restore acc from priv keys #146 Go mod Ci dependency error #128 Update to cosmos 29 #126 Write down bandwidth specification #114 Make docker container based on nvidia-gpu image. #104 Index transactions by addresses. #103 Calculate rank in ||, post results each 600 blocks. #101 Linkchains support #91 Include addresses into knowledge graph #90 Graphics for whitepaper #88 Add bandwidth by stake #77 Launch testnet Euler #73 Test Ethereum Network Statistical Significance #52 Cyberd landing design #51 Simulation #31 Link Chain PoC | Zeronet #26 Write benchmark and test SpringRank with different amount of objects/edges #22 Parse Ethereum network and calculate SpringRank #21 Research basic chains fundamentals #15 Perfomance testing of Solana #10 Research on perfomance of consensus computers #9 Perfomance testing scenario for cyberd #8  Merged pull requests:\n [euler] Launch euler testnet #148 (hleb-albau) Cli: Add possibility to restore acc from priv keys #147 (arturalbov) Rank merkle proofs #144 (arturalbov) Setup bw params #143 (hleb-albau) Merkle tree implementation #141 (arturalbov) #139 Index out of range for cids with not calculated rank yet. #140 (hleb-albau) Fix http client and rank logs #137 (hleb-albau) [euler-dev3] New testnet #136 (hleb-albau) #101 Copy state before index creation #135 (hleb-albau) #92 Populate state with random addresses #134 (hleb-albau) Small fixes #131 (arturalbov) Parallel rank calculation #130 (arturalbov) Update stake index every block #129 (hleb-albau) #126 Update to cosmos 29 #127 (hleb-albau) Refactoring #125 (hleb-albau) Various Bug fixes #124 (hleb-albau) In-memory storages refactoring #123 (arturalbov) #114 Write bw specification #121 (hleb-albau) WIP #114 Add cbdbank module #120 (hleb-albau) Update readme #119 (hleb-albau) Clean up folders #118 (arturalbov) #103 Index transactions by signers. #117 (hleb-albau)  v0.0.8 (2018-12-11) Full Changelog\nImplemented enhancements:\n Cid validation #93 Update to cosmos-sdk version 0.26.1 #79 Build node releases with cleveldb #59 Remove \u0026lsquo;cosmosaccaddr\u0026rsquo; prefix from cyberd address #39  Closed issues:\n Make up cyberd landing #87 Add possibility to join for new validators. #75 Calculate rank using GPU #74 Create basic wiki cyberd indexer #71 Create cyberd PoC based on Cosmos SDK #37 Draw logo for cyberd #16 Build basic economic model #1  Merged pull requests:\n #76 Define Basic RPC specification #111 (hleb-albau) #104 Make docker container based on nvidia-gpu image #110 (hleb-albau) [DON\u0026rsquo;T MERGE] Add bandwidth by stake. Part 2. #108 (arturalbov) Add bandwidth by stake Part 1 #107 (arturalbov) #93 Cid validation #106 (hleb-albau) #78 Add guide How to join network as validator #105 (hleb-albau) #1 Build basic economic model #102 (hleb-albau) Update cosmos to 0.27.0 #100 (hleb-albau) Small fixes for validators joining #98 (arturalbov) Remove poc folder #97 (hleb-albau) Add possibility to join for new validators #96 (arturalbov) Calculate eth network significance #85 (hleb-albau) 74 gpu rank calculation #83 (hleb-albau) Remove \u0026lsquo;cosmosaccaddr\u0026rsquo; prefix from cyberd address #82 (arturalbov) UPD docs_upd job #81 (SaveTheAles) Update cosmos-sdk version to 0.26.1 #80 (arturalbov)  v0.0.7 (2018-10-25) Full Changelog\nImplemented enhancements:\n Proxy service. Add search pagination #69 Add send tokens endpoint to proxy #62  Fixed bugs:\n Proxy service. Search request with \u0026ldquo;spaces\u0026rdquo; fails #67 Non-deterministic rank calculation #66  Closed issues:\n Claim service: increment tx sequence manually #64  Merged pull requests:\n #71 Create basic wiki cyberd indexer #72 (hleb-albau) Proxy service. Add search pagination #70 (arturalbov) Proxy service. Search request with spaces fails #68 (arturalbov) Claim service: increment tx sequence manually #65 (arturalbov)  v0.0.6 (2018-10-24) Full Changelog\nv0.0.5 (2018-10-23) Full Changelog\nImplemented enhancements:\n [RPC] Fix small finding #57  v0.0.4 (2018-10-23) Full Changelog\nClosed issues:\n Service to claim cyberd zeronet tokens #61 Update cosmos-sdk to latest dev branch version #56 Perfomance Degradation: Heavy Disk Usage #50  Merged pull requests:\n Add send tokens endpoint to proxy #63 (arturalbov) Claim service #60 (arturalbov) #57 [RPC] Fix small finding #58 (hleb-albau) Update cosmos-sdk to latest dev branch version #53 (hleb-albau)  v0.0.3 (2018-10-19) Full Changelog\nImplemented enhancements:\n CLI: Add \u0026ldquo;wait_for_confirmation\u0026rdquo; Flag #47  Fixed bugs:\n RPC Client: /search on non existing cid return first added cid #48  Closed issues:\n Write validation logic of IPFS hash for Losion Zeronet #18 Genesis Zeronet #17 Performance testing of Zeronet #4  Merged pull requests:\n Add cyberdproxy process to docker container. Add status endpoint #55 (arturalbov) Proxy rpc #54 (arturalbov)  v0.0.2 (2018-10-05) Full Changelog\nImplemented enhancements:\n Cosmos PoC: Integrate Rank Calculation #43 Cosmos PoC: Extenend Standart Tendermint RPC API #42  Closed issues:\n Implement persistent storage for links. #40 run extra node for cyberd #20  Merged pull requests:\n Fix search on non existing cid #49 (arturalbov) Add Circle CI build job #46 (arturalbov) Extenend Standart Tendermint RPC API #45 (arturalbov) #43 Simplest Rank #44 (hleb-albau) #40 introduce in-memory store #41 (hleb-albau) #37 redesign db, app refactor #38 (hleb-albau) Cosmos POC: Clean up CLI #35 (arturalbov) Update cyberd/cosmos README #34 (arturalbov)  v0.0.1 (2018-09-25) Closed issues:\n Make cyberd docs to be included into common wiki. #32 Write LT/NLT logic to Losion Zeronet #19 Research basic technologies #14 Research basic papers #13 Perfomance testing of Ethermint #12 Perfomance testing of Plasma #11 Perfomance testing of PoA networks #7 Cleanup paper #6 Perfomance testing of EOS #3  Merged pull requests:\n Genesis zeronet: Cosmos SDK #33 (arturalbov) [WIP] 21 calculate spring rank for ethereum #23 (hleb-albau) Fixing typo #2 (trummax)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/cyberd/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing to cyberd Thank you for considering a contribution to cyberd! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble\nGet in touch Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we\u0026rsquo;ll ask you to create a short design document explaining:\n Why is this change done? What\u0026rsquo;s the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We\u0026rsquo;ll happily provide code pointers to save you time)  Development Workflow Development Setup Please, use development environment setup guide.\nCreating Commits And Writing Commit Messages The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example: ``` #123 Refactor CONTRIBUTING.md  \u0026ndash;Add Creating Commits And Writing Commit Messages Section ```\nSubmitting Your Change After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don\u0026rsquo;t get discouraged by change requests. They ensure the high quality that we all enjoy.\nGetting Help If you run into any trouble, please reach out to us on the issue you are working on.\nOur Thanks We deeply appreciate your effort toward improving cyberd. For any contribution, large or small, you will be immortalized in the release notes for the version you\u0026rsquo;ve contributed to.\n"
    },
    {
        "uri": "/docs/cyberd/get_cyb/",
        "title": "",
        "description": "",
        "content": " How to get CYB? Not until we setup CYB faucet you can get cyb just asking cyberadmin for that in our devChat\nThis method is actual only in Euler-4 testnet.\n"
    },
    {
        "uri": "/docs/cyberd/keystore/",
        "title": "",
        "description": "",
        "content": " Keystore management "
    },
    {
        "uri": "/docs/cyberd/launch_network/",
        "title": "",
        "description": "",
        "content": " Launch network Export state from previous network To export network at given state you should have fullnode stopped at required height. You can use any existing fullnode\\validator node, or sync new node from the begging.\nNote: use fail-before-height flag to stop node before given height. Example:\ndocker run -d --runtime=nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd start --fail-before-height=322  Assuming you node files are located under /cyberd/daemon path and current chain is euler-x, run export command\ndocker run --rm --runtime=nvidia -v /cyberd/daemon:/root/.cyberd cyberd/cyberd:euler-x cyberd export  Now, you will have two genesis files under path /cyberd/daemon/export.\nGenerate new validators gentx Copy two genesis files into daemon config folder, for example /cyberd/daemon-y/config. Copy validator key to the same directory. To add initial valdator to the genesis.json run:\ndocker run --rm --runtime=nvidia -v /cyberd/daemon-y:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli cyberd gentx --amount=10000000cyb --name=wallet_key --moniker=hlb  Update Dockerfile Upload new genesis.json and links files to IPFS. Update Dockerfile ipfs hashes. Build new image locally, upload it to Dockerhub registry.\nLaunch seed node. You should backup seed node node_key.json from previous network. Using new image, launch seed node with given key.\nLaunch first validator node. Using validators key from gentx step and new docker image launch first validator node.\nKnowing issues During cosmos sdk update a set of new params can be added to genesis.json, thus make current invalid. In such case, you need create new empty json via testnet command and use it as template for manually assembled genesis file.\n"
    },
    {
        "uri": "/docs/cyberd/multisig_guide/",
        "title": "",
        "description": "",
        "content": " 2 of 3 multisig account creation and sending transaction guide Cyberd uses docker container technology for usability. If you don\u0026rsquo;t use docker container and use gaiacli or you\u0026rsquo;ve installed cyberd from binaries this guide is useful for you too. Just skip some docker features, because this guide focused on docker users. Remind: this guide covers all types of transactions, not only send. Also, this guide actual for Cosmos Hub Gaiacli users excepted bandwidth in Cosmos we pay a fee with tokens.\nDo not forget about --chain-id flag in cyberd and even Cosmos Hub networks. Current \u0026lt;chain-id\u0026gt; you can always get in master branch of product repo.\nCreating multisig Multisig account creating and sending transaction is simple and clear but a little bit long.\n Go inside docker container:  1.1 Detect \u0026lt;container_id\u0026gt; bash docker ps  1.2 \u0026hellip; and go inside it bash docker exec -ti \u0026lt;container_id\u0026gt; bash \n Import or create thresholders accounts for multisig: bash cyberdcli keys add test1 cyberdcli keys add test2  Add pubkeys of remote thresholders accounts:\ncyberdcli keys add test3 --pubkey=\u0026lt;thresholder_pub_key\u0026gt;  Now we have 3 accounts for multisig account generating: test1 and test2 on the local machine and we have access to them. test3 from remote thresholder and we haven\u0026rsquo;t access to it. All created and imported accounts you can check with:\ncyberdcli keys list  Now we can create test 2-of-3 multisig account named, for example, multitest1 with keys test1,test2 on local machine and test3 by remote thresholder:\ncyberdcli keys add multitest1 --multisig=test1,test2,test3 --multisig-threshold 2  You should top up your balance of your multisig account. Make sure if you have enough bandwidth to make transaction later.\n  Spending from multisig  Create unsigned transaction from multisig account and store it in unsigned.json file:\ncyberdcli tx send \u0026lt;recipient_address\u0026gt; \u0026lt;amount\u0026gt;cyb --from=\u0026lt;multisig_address\u0026gt; --chain-id=\u0026lt;chain_id\u0026gt; --generate-only \u0026gt; unsigned.json  Sign this transaction with the following command and store signed file in sign1.json:\ncyberdcli tx sign unsigned.json --multisig=\u0026lt;multisig_address\u0026gt; --from=\u0026lt;your_account_name\u0026gt; --output-document sign1.json --chain-id=\u0026lt;chain_id\u0026gt;  Now you need to send the resulting file to remote thresholders for signing. You can see the content of the transaction file with\ncat unsigned.json  command and copy content to convenient for you .json file and send it. Also, you can copy this file from docker container to local machine by following command\ndocker cp \u0026lt;container_id\u0026gt;:/unsigned.json .  File will been copied to current repo.\n Remote thresholder should to sign it too like it was two steps below and send you signed file back. For example sign2.json\n Copy signed file from remote thresholder in a docker container by the following command:\n  docker cp sign2.json \u0026lt;container_id\u0026gt;:/sign2.json  Your docker container should content 3 .json files: unsigned.json, sign1.json, and sign2.json at least. This is necessary and sufficient condition because we\u0026rsquo;ve set up 2 of 3 multisig account\n Go bask inside a docker container and generate multisig transaction with all signs.  cyberdcli tx multisign unsigned.json multitest1 sign1.json sign2.json --chain-id=\u0026lt;chain_id\u0026gt; \u0026gt; signed.json   Finally we need to broadcast this transaction to network  cyberdcli tx broadcast signed.json --chain-id=\u0026lt;chain_id\u0026gt;  If multisig account has enough bandwidth transaction should be broadcasted.\n"
    },
    {
        "uri": "/docs/cyberd/params/",
        "title": "",
        "description": "",
        "content": " ://cyber staking and distribution overview Params    Module Param Value Comment     Staking UnbondingTime 3 weeks time duration of unbonding   Staking MaxValidators 146 maximum number of active validators set   Staking MaxEntries 7 max entries for either unbonding delegation or redelegation per delegator/validator pair(delegator/validator/validator for redelegation)         Consensus MaxBytes 1mb block max bytes limit         Rank RankCalcWindow 100 full rank recalculation window         Distr CommunityTax 0% community funding tax, not used   Distr BaseProposerReward 1% % of block inflation goes to proposer   Distr BonusProposerReward 4% addition reward, calculated as % of included votes from validators set         Slashing MaxEvidenceAge 3weeks misbehaviour evidence max age   Slashing SignedBlocksWindow 30min window to calculate validators liveness   Slashing MinSignedPerWindow 70% min singed block for window to not be jailed   Slashing DowntimeJailDuration 0 unjail delay   Slashing SlashFractionDoubleSign 20% % of stake reduction for double sign   Slashing SlashFractionDowntime 0.1% % of stake reduction for being offline         Mint TokensPerBlock 0.634195840 Gcyb validators block rewards         Bandwidth RecoveryWindow 24h from 0 to max recovery period   Bandwidth PriceSlidingWindow 24h price calculated based on network load for selected period   Bandwidth PriceAdjustWindow 1m how ofter price is recalculated   Bandwidth PriceMin 0.01 minimum price number (1 means normal price)   Bandwidth LinkCost 100 link msg cost   Bandwidth NonLinkCost 5 * LinkCost link msg cost   Bandwidth TxCost 3 * LinkCost tx cost   Bandwidth DesirableNetworkBandwidthForRecoveryPeriod 2000 * 1000 * LinkCost how much all users in average can spend for recover period    Staking The cyberd is a public Proof-Of-Stake (PoS) blockchain, meaning that validator\u0026rsquo;s weight is determined by the amount of staking tokens bonded as collateral. These tokens can be staked directly by the validator or delegated to them by token holders. The weight (i.e. total stake) of a validator determines whether or not it is an active validator, and also how frequently this node will have to propose a block and how much revenue it will obtain.\nValidator Any user in the system can declare its intention to become a validator by sending a create-validator transaction. From there, they become validators. Validator can set commission, that applied on revenue before it is distributed to their delegators.\nEach validator holds: - All bounded tokens(self and delegators). NOTE: not include distribution rewards. - Own distribution rewards (commission rewards) - Delegators distribution rewards - All delegators shares. Share is not mapped 1-to-1 to tokens. In a case a validator being punished for misbehaviour, bounded tokens will be reduced, while shares remain a same.\nDelegation Delegators are token holders who cannot, or do not want to run validator operations themselves. A user can delegate tokens to a validator and obtain a part of its revenue in exchange. Upon delegation a user converts his tokens to validator shares in a rate val_tokens/val_shares.\nUndelegation A user may want to cancel delegation to specific validator. To do so, he/she send undelegate transaction. Depending on current validator state, either user receive his revenue proportion and bounded tokens back immediately (for unbonded validator), or just start process of undelegation. If a validator is in unbonding state, than a user will receive tokens at a validator unbonding time. In last case, a user will wait full UnbondingTime period.\nSlashing If validators double sign, are frequently offline or do not participate in governance, their staked tokens (including tokens of users that delegated to them) can be destroyed, or \u0026lsquo;slashed\u0026rsquo;.\nAt the beginning of each block, we update the signing info for each validator and check if they\u0026rsquo;ve dipped below the liveness threshold MinSignedPerWindow over the tracked window SignedBlocksWindow. If so, their stake will be slashed by SlashFractionDowntime percentage and will be Jailed for DowntimeJailDuration.\nDistribution All minted tokens goes to fees pool. At each beginblock, the fees received on previous block are allocated to the proposer, community fund, and previous block active validators set according to next scheme:\n When the validator is the proposer of the round, that validator (and their delegators) receives between BaseProposerReward and BonusProposerReward of fee rewards. The amount of proposer reward is calculated from pre-commits Tendermint messages in order to incentives validators to wait and include additional pre-commits in the block.\n Community tax is then charged from full fees.\n The remainder is distributed proportionally by voting power to all bonded validators(and their delegators) independent of whether they voted (social distribution).\n  "
    },
    {
        "uri": "/docs/cyberd/port_forwarding_guide/",
        "title": "",
        "description": "",
        "content": " Decentralization must be decentralized January 3, 2019, we\u0026rsquo;ve launched first public testnet Euler-3. Since this time we have 3 relaunches and much more we\u0026rsquo;ll has in the future. Thanks to our testers and validators we\u0026rsquo;re finding and fixing new bugs every day. But now one fundamental and critical bug is not fixed yet. Currently, we have just 2 seed nodes and they able to upload data and provide connection to other nodes. Unfortunately, this is not about decentralization.\nAn obvious problem of decentralization is that no entity has a global vision of the system, and there is no central authority to direct nodes in making optimal decisions with regard to software updates, routing, or solving consensus. This makes the availability of a decentralized network more difficult to maintain, a factor significant enough to contribute to the failure of a system.\nBy the way, a huge part of disconnections and, as result, validators jailing happens by this reason.\nCyberd cli can’t automatically configure your router to open port 26656, you will need to manually configure your router. We’ve can\u0026rsquo;t make the following instructions to cover all router models; if you need specific help with your router, please ask for help on our devChat.\nEnabling inbound connections requires two steps:\n Giving your computer a static (unchanging) internal IP address by configuring the Dynamic Host Configuration Protocol (DHCP) on your router.\n Forwarding inbound connections from the Internet through your router to your computer where cyberd container can process them.\n Editing cyberd configuration file.\n  Configuring DHCP In order for your router to direct incoming port 26656 connections to your computer, it needs to know your computer’s internal IP address. However, routers usually give computers dynamic IP addresses that change frequently, so we need to ensure your router always gives your computer the same internal IP address.\nStart by logging into your router’s administration interface. Most routers can be configured using one of the following URLs, so keep clicking links until you find one that works. If none work, consult your router’s manual.\n http://192.168.0.1 (some Linksys/Cisco models) http://192.168.1.1 (some D-Link/Netgear models) http://192.168.2.1 (some Belkin/SMC models) http://192.168.123.254 (some US Robotics models) http://10.0.1.1 (some Apple models)  Upon connecting, you will probably be prompted for a username and password. If you configured a password, enter it now. If not, the Router Passwords site provides a database of known default username and password pairs.\nAfter logging in, you want to search your router’s menus for options related to DHCP, the Dynamic Host Configuration Protocol. These options may also be called Address Reservation.\nIn the reservation configuration, some routers will display a list of computers and devices currently connected to your network, and then let you select a device to make its current IP address permanent.\nIf that’s the case, find the computer running cyberd container in the list, select it, and add it to the list of reserved addresses. Make a note of its current IP address—we’ll use the address in the next section.\nOther routers require a more manual configuration. For these routers, you will need to look up the fixed address (MAC address) for your computer’s network card and add it to the list.\nOpen a terminal and type ifconfig. Find the result that best matches your connection—a result starting with wlan indicates a wireless connection. Find the field that starts with HWaddr and copy the immediately following field that looks like 01:23:45:67:89:ab. Use that value in the instructions below.\nOnce you have the MAC address, you can fill it into to your router’s manual DHCP assignment table. Also, choose an IP address and make a note of it for the instructions in the next subsection. After entering this information, click the Add or Save button.\nThen reboot your computer to ensure it gets assigned the address you selected and proceed to the Port Forwarding instructions below.\nPort Forwarding For this step, you need to know the local IP address of the computer running cyberd container. You should have this information from configuring the DHCP assignment table in the subsection above.\nLogin to your router using the same steps described near the top of the DHCP subsection. Look for an option called Port Forwarding, Port Assignment, or anything with “Port” in its name. On some routers, this option is buried in an Applications \u0026amp; Gaming menu.\nThe port forwarding settings should allow you to map an external port on your router to the “internal port” of a device on your network.\nBoth the external port and the internal port should be 26656 for cyberd container.\nMake sure the IP address you enter is the same one you configured in the previous subsection.\nAfter filling in the details for the mapping, save the entry. You should not need to restart anything. Just ask us in devChat about successful connection.\nIf you still can’t connect and you use a firewall, you probably need to change your firewall settings. Ubuntu comes with its firewall disabled by default, but if you have enabled it, see the Ubuntu wiki page for information about adding port forwarding rules.\nIf something else went wrong, it’s probably a problem with your router configuration. Re-read the instructions above to see if you missed anything, search the web for help with “port forwarding”, and ask for help on devChat.\nConfiguring cyberd Go to cyberd daemon folder, then go to config folder and open config.toml file for editing.\nFind peer to peer configuration options section and edit external_address variable with your IP address and port 26656\nRestart cyberd container.\nWe call to you, validators, with a proposal to forwarding port 26656 and make you validator-nodes available to the incoming connection.\nUnfortunately, we can\u0026rsquo;t provide all guides for port forwarding because of they different for each router. But if you faced on with some troubles feel free to contact us in our devChat.\n"
    },
    {
        "uri": "/docs/cyberd/rpc/",
        "title": "",
        "description": "",
        "content": " API reference Cyberd provides a JSON-RPC API. Http endpoint is served under localhost:20657. WebSockets are the preferred transport for cyberd RPC and are used by applications such as cyb. Default WebSocket connection endpoint for cyberd is ws://localhost:20657/websocket. There are test endpoints available at http://earth.cybernode.ai:34657 and ws://earth.cybernode.ai:34657/websocket.\n\nStandard Methods Query Example Query http endpoint using curl:\ncurl --data '{\u0026quot;method\u0026quot;:\u0026quot;status\u0026quot;,\u0026quot;params\u0026quot;:[],\u0026quot;id\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot;}' \\ -H \u0026quot;Content-Type: application/json\u0026quot; -X POST earth.cybernode.ai:34657  Query ws endpoint from js:\nlet websocket = new WebSocket(\u0026quot;ws://earth.cybernode.ai:34657/websocket\u0026quot;); websocket.send(JSON.stringify({ \u0026quot;method\u0026quot;:\u0026quot;status\u0026quot;, \u0026quot;params\u0026quot;:[], \u0026quot;id\u0026quot;:\u0026quot;1\u0026quot;, \u0026quot;jsonrpc\u0026quot;:\u0026quot;2.0\u0026quot; }));  Method Overview The following is an overview of the RPC methods and their current status. Click the method name for further details such as parameter and return information.\n   # Method Description     1 status Get node info, pubkey, latest block hash, app hash, block height and time.   2 account Get account nonce, pubkey, number, and coins.   3 account_bandwidth Get account bandwidth info for current height.   4 is_link_exist Return true, if given link exist.   5 current_bandwidth_price Returns current bandwidth credit price.   6 index_stats Returns current index entities count.    Method Details          Method status   Parameters None   Description Get node info, pubkey, latest block hash, app hash, block height and time.   Return to Overview\n              Method account   Parameters 1. address (string, required)\n   Description Get account nonce, pubkey, number, and coins.   Return to Overview\n              Method account_bandwidth   Parameters 1. address (string, required)\n   Description Get account bandwidth info for current height.   Return to Overview\n              Method is_link_exist   Parameters 1. from (cid, required)\n2. to (cid, required)\n3. address (string, required)\n   Description Return true, if given link exist.   Return to Overview\n              Method current_bandwidth_price   Parameters None   Description Returns current bandwidth credit price.   Return to Overview\n              Method index_stats   Parameters None   Description Returns current index entities count.   Return to Overview\n     \nNotifications (WebSocket-specific) Cyberd uses standard JSON-RPC notifications to notify clients of changes, rather than requiring clients to poll cyberd for updates. JSON-RPC notifications are a subset of requests, but do not contain an ID. The notification type is categorized by the query params field.\nSubscribe Example Subscribe for new blocks header from js:\nlet websocket = new WebSocket(\u0026quot;ws://earth.cybernode.ai:34657/websocket\u0026quot;); websocket.send(JSON.stringify({ \u0026quot;method\u0026quot;: \u0026quot;subscribe\u0026quot;, \u0026quot;params\u0026quot;: [\u0026quot;tm.event='NewBlockHeader'\u0026quot;], \u0026quot;id\u0026quot;: \u0026quot;1\u0026quot;, \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot; }));  Events Overview    # Event Description     1 NewBlockHeader Sends block header notification when a new block is committed.   2 CoinsReceived Sends a notification when a new coins is arrived to given address.   3 CoinsSend Sends a notification when a new coins is send from given address.   4 СidsLinked Notification of link created by given address.   5 SignedTxCommitted Notify when any tx for given signer is committed.    Events Details NewBlockHeader          Event NewBlockHeader   Description Sends block header notification when a new block is committed.   Query tm.event='NewBlockHeader'   Return to Overview\n     CoinsReceived          Event CoinsReceived   Description Sends a notification when a new coins is arrived to given address.   Query tm.event='EventTx' AND recipient='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     CoinsSend          Event CoinsSend   Description Sends a notification when a new coins is send from given address.   Query tm.event='EventTx' AND sender='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     СidsLinked          Event СidsLinked   Description Notification of link created by given address.   Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds' AND action='link'   Return to Overview\n     SignedTxCommitted          Event SignedTxCommitted   Description Notify when any tx for given signer is committed.   Query tm.event='EventTx' AND signer='cbd1sk3uvpacpjm2t3389caqk4gd9n9gkzq2054yds'   Return to Overview\n     "
    },
    {
        "uri": "/docs/cyberd/run_validator/",
        "title": "",
        "description": "",
        "content": " Join Cyberd Network As Validator Note. Currently active dev testnet is euler-4 (substitute  with that value).\nPrepare your server First, you have to setup a server. You are supposed to run your validator node all time, so you will need a reliable server to keep it running. Also, you may consider to use any cloud services like AWS.\nCyberd is based on Cosmos SDK written in Go. It should work on any platform which can compile and run programs in Go. However, I strongly recommend running the validator node on a Linux server.\nRank calculation on a cyberd is benefit GPU computation. They easy to parallelize that why is the best way is to use GPU.\nMinimal requirements for the next two weeks (until the middle of February):\nCPU: 4 cores RAM: 16 GB SSD: 256 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS  Recommended requirements:\nCPU: 6 cores RAM: 64 GB SSD: 512 GB Connection: 100Mb, Fiber, Stable and low-latency connection GPU: GeForce 1070-1080, CUDA Software: Docker, Ubuntu 16.04/18.04 LTS  Validator setup Third-party software Cyberd main distribution unit is a docker container. All images are located in default Dockerhub registry. In order to access GPU from the container, Nvidia drivers version 410+ and Nvidia docker runtime should be installed on the host system. For great user experience, we propose you to use portainer - docker containers manager. You can skip any subsection of this if you already had and configured necessary software.\nDocker installation  Update the apt package index:  sudo apt-get update   Install packages to allow apt to use a repository over HTTPS:  sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common   May require curl installation apt-get install curl\n  Add Docker’s official GPG key:  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot;   Update the apt package index.  sudo apt-get update   Install the latest version of Docker CE and containerd, or go to the next step to install a specific version:  sudo apt-get install docker-ce docker-ce-cli containerd.io  If you don’t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group.\n Create the docker group.  sudo groupadd docker   Add your user to the docker group.  sudo usermod -aG docker $USER   Reboot the system for the changes to take effect.  Portainer installation  Before installing Portainer, download the Portainer image from the DockerHub using the docker pull command below.  docker pull portainer/portainer   Now run Portainer using the simple docker command below.  docker run -d --restart always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer   Open your browser and go to:  localhost:9000   Set password, chose local tab and click connect. All containers will be available at containers tab.  Nvidia drivers installation  To proceed first add the ppa:graphics-drivers/ppa repository into your system:  sudo add-apt-repository ppa:graphics-drivers/ppa  sudo apt update   Install Ubuntu-drivers\nsudo apt install -y ubuntu-drivers-common  Next, identify your graphic card model and recommended driver:\n  ubuntu-drivers devices  You should see something like this:\n== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00001BA1sv00001462sd000011E4bc03sc00i00 vendor : NVIDIA Corporation model : GP104M [GeForce GTX 1070 Mobile] driver : nvidia-driver-390 - third-party free driver : nvidia-driver-410 - third-party free driver : nvidia-driver-396 - third-party free driver : nvidia-driver-415 - third-party free recommended driver : xserver-xorg-video-nouveau - distro free builtin   We need 410+ drivers release. As we see v415 is recommended. The command below will install the recommended version of drivers.  sudo ubuntu-drivers autoinstall  Drivers will install due approximately 10 minutes.\nDKMS: install completed. Setting up libxdamage1:i386 (1:1.1.4-3) ... Setting up libxext6:i386 (2:1.3.3-1) ... Setting up libxfixes3:i386 (1:5.0.3-1) ... Setting up libnvidia-decode-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up build-essential (12.4ubuntu1) ... Setting up libnvidia-gl-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libnvidia-encode-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up nvidia-driver-415 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libxxf86vm1:i386 (1:1.1.4-1) ... Setting up libglx-mesa0:i386 (18.0.5-0ubuntu0~18.04.1) ... Setting up libglx0:i386 (1.0.0-2ubuntu2.2) ... Setting up libgl1:i386 (1.0.0-2ubuntu2.2) ... Setting up libnvidia-ifr1-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Setting up libnvidia-fbc1-415:i386 (415.27-0ubuntu0~gpu18.04.1) ... Processing triggers for libc-bin (2.27-3ubuntu1) ... Processing triggers for initramfs-tools (0.130ubuntu3.1) ... update-initramfs: Generating /boot/initrd.img-4.15.0-45-generic   Reboot the system for the changes to take effect.\n Check installed drivers\n  nvidia-smi  You should see this:\n+-----------------------------------------------------------------------------+ | NVIDIA-SMI 430.14 Driver Version: 430.14 CUDA Version: 10.2 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 Off | N/A | | 26% 36C P5 26W / 180W | 0MiB / 8119MiB | 2% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| | No running processes found | +-----------------------------------------------------------------------------+  Install Nvidia container runtime for docker  Add the package repositories  curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\ sudo apt-key add -  distribution=$(. /etc/os-release;echo $ID$VERSION_ID)  curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\ sudo tee /etc/apt/sources.list.d/nvidia-docker.list  You should see this:\ndeb https://nvidia.github.io/libnvidia-container/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-container-runtime/ubuntu18.04/$(ARCH) / deb https://nvidia.github.io/nvidia-docker/ubuntu18.04/$(ARCH) /   Install nvidia-docker2 and reload the Docker daemon configuration  sudo apt-get update  sudo apt-get install -y nvidia-docker2  sudo pkill -SIGHUP dockerd   Test nvidia-smi with the latest official CUDA image  docker run --runtime=nvidia --rm nvidia/cuda:10.0-base nvidia-smi  Output logs must should coincide as earlier:\nUnable to find image 'nvidia/cuda:10.0-base' locally 10.0-base: Pulling from nvidia/cuda 38e2e6cd5626: Pull complete 705054bc3f5b: Pull complete c7051e069564: Pull complete 7308e914506c: Pull complete 5260e5fce42c: Pull complete 8e2b19e62adb: Pull complete Digest: sha256:625491db7e15efcc78a529d3a2e41b77ffb5b002015983fdf90bf28955277d68 Status: Downloaded newer image for nvidia/cuda:10.0-base Fri Feb 1 05:41:12 2019 +-----------------------------------------------------------------------------+ | NVIDIA-SMI 415.27 Driver Version: 415.27 CUDA Version: 10.0 | |-------------------------------+----------------------+----------------------+ | GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. | |===============================+======================+======================| | 0 GeForce GTX 1070 Off | 00000000:01:00.0 On | N/A | | N/A 55C P0 31W / N/A | 445MiB / 8117MiB | 38% Default | +-------------------------------+----------------------+----------------------+ +-----------------------------------------------------------------------------+ | Processes: GPU Memory | | GPU PID Type Process name Usage | |=============================================================================| +-----------------------------------------------------------------------------+  Your machine is ready to launch fullnode.\nCyberd fullnode launching  Create folders for keys and data storing where you want for example:  mkdir /cyberd/daemon mkdir /cyberd/cli   Run fullnode  docker run -d --name=cyberd --restart always --runtime=nvidia -p 26656:26656 -p 26657:26657 -p 1317:1317 -v /cyberd/daemon:/root/.cyberd -v /cyberd/cli:/root/.cyberdcli cyberd/cyberd:\u0026lt;testnet_chain_id\u0026gt;   After successful container pulling and launch run to check if your node is connected to the testnet:  docker exec cyberd cyberdcli status  The possible output looks like this:\n{\u0026quot;node_info\u0026quot;:{\u0026quot;protocol_version\u0026quot;:{\u0026quot;p2p\u0026quot;:\u0026quot;6\u0026quot;,\u0026quot;block\u0026quot;:\u0026quot;9\u0026quot;,\u0026quot;app\u0026quot;:\u0026quot;0\u0026quot;},\u0026quot;id\u0026quot;:\u0026quot;93b776d3eb3f3ce9d9bda7164bc8af3acacff7b6\u0026quot;,\u0026quot;listen_addr\u0026quot;:\u0026quot;tcp://0.0.0.0:26656\u0026quot;,\u0026quot;network\u0026quot;:\u0026quot;euler-1\u0026quot;,\u0026quot;version\u0026quot;:\u0026quot;0.29.1\u0026quot;,\u0026quot;channels\u0026quot;:\u0026quot;4020212223303800\u0026quot;,\u0026quot;moniker\u0026quot;:\u0026quot;anonymous\u0026quot;,\u0026quot;other\u0026quot;:{\u0026quot;tx_index\u0026quot;:\u0026quot;on\u0026quot;,\u0026quot;rpc_address\u0026quot;:\u0026quot;tcp://0.0.0.0:26657\u0026quot;}},\u0026quot;sync_info\u0026quot;:{\u0026quot;latest_block_hash\u0026quot;:\u0026quot;686B4E65415D4E56D3B406153C965C0897D0CE27004E9CABF65064B6A0ED4240\u0026quot;,\u0026quot;latest_app_hash\u0026quot;:\u0026quot;0A1F6D260945FD6E926785F07D41049B8060C60A132F5BA49DD54F7B1C5B2522\u0026quot;,\u0026quot;latest_block_height\u0026quot;:\u0026quot;45533\u0026quot;,\u0026quot;latest_block_time\u0026quot;:\u0026quot;2019-02-01T09:49:19.771375108Z\u0026quot;,\u0026quot;catching_up\u0026quot;:false},\u0026quot;validator_info\u0026quot;:{\u0026quot;address\u0026quot;:\u0026quot;66098853CF3B61C4313DD487BA21EDF8DECACDF0\u0026quot;,\u0026quot;pub_key\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;tendermint/PubKeyEd25519\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;uZrCCdZTJoHE1/v+EvhtZufJgA3zAm1bN4uZA3RyvoY=\u0026quot;},\u0026quot;voting_power\u0026quot;:\u0026quot;0\u0026quot;}}  Your node has started to sync. The syncing process you can see in the terminal. Open a new tab and run following command:\ndocker logs cyberd --follow  Or go to localhost:9000 and open logs at cyberd container:\nSyncing has started. Syncing time depends on your internet bandwidth, connection and blockchain height. As at 2019/02/03 syncing time approximately 15-20 minutes. Once you see in logs that blocks syncing for 1 second your node is synced.\nAdditional information available by API endpoint at localhost:26657\nf.e. the number of active validators available here localhost:26657/validators\nValidator start After your node successful synced you can run validator.\nPrepare stake address If you already have address with CYB and know seed phrase or private key just restore it into your local keystore.\ndocker exec -ti cyberd cyberdcli keys add \u0026lt;your_key_name\u0026gt; --recover docker exec cyberd cyberdcli keys show \u0026lt;your_key_name\u0026gt;  If you have been lucky enought and your Ethereum address has been included in genesis you can import ethereum private key\n Please, do not import high value Ethereum accounts. This can not be safe! cyberd software is a new software and is not battle tested yet.\n docker exec -ti cyberd cyberdcli keys add import_private \u0026lt;your_key_name\u0026gt; docker exec cyberd cyberdcli keys show \u0026lt;your_key_name\u0026gt;  If you want to create new acccount use the command below. Also, you should send coins to that address to bound them later during validator submitting.\ndocker exec -ti cyberd cyberdcli keys add \u0026lt;your_key_name\u0026gt; docker exec cyberd cyberdcli keys show \u0026lt;your_key_name\u0026gt;   is any name you pick to represent this key pair. You have to refer to this  later when you use the keys to sign transactions. It will ask you to enter your password twice to encrypt the key. You also need to enter your password when you use your key to sign any transaction.\nThe command returns the address, public key and a seed phrase which you can use it to recover your account if you forget your password later. Keep the seed phrase in a safe place in case you have to use them.\nThe address showing here is your account address. Let’s call this . It stores your assets.\nSend create validator transaction Validators are actors on the network committing new blocks by submitting their votes. It refers to the node itself, not a single person or a single account. Therefore, the public key here is referring to the node public key, not the public key of the address you have just created.\nTo get the node public key, run the following command:\ndocker exec cyberd cyberd tendermint show-validator  It will return a bech32 public key. Let’s call it . The next step you have to declare a validator candidate. The validator candidate is the account which stake the coins. So the validator candidate is an account this time. To declare a validator candidate, run the following command adjusting stake amount and other fields.\ndocker exec -ti cyberd cyberdcli tx staking create-validator \\ --amount=10000000cyb \\ --min-self-delegation \u0026quot;1000000\u0026quot; \\ --pubkey=\u0026lt;your_node_pubkey\u0026gt; \\ --moniker=\u0026lt;your_node_nickname\u0026gt; \\ --trust-node \\ --from=\u0026lt;your_key_name\u0026gt; \\ --commission-rate=\u0026quot;0.10\u0026quot; \\ --commission-max-rate=\u0026quot;0.20\u0026quot; \\ --commission-max-change-rate=\u0026quot;0.01\u0026quot; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Verify that you validating docker exec -ti cyberd cyberdcli query staking validators --trust-node=true  If you see your \u0026lt;your_node_nickname\u0026gt; with status Bonded and Jailed false everything must be good. You are validating the network.\nMaintenance of validator jailing If your validator go under slashing conditions it first go to jail. After this event operator must unjail it manually.\ndocker exec -ti cyberd cyberdcli tx slashing unjail --from=\u0026lt;your_key_name\u0026gt; --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Upgrading of validator Updating is easy as pulling the new docker container and launching it again\ndocker pull cyberd/cyberd:\u0026lt;testnet_chain_id\u0026gt; docker stop cyberd docker rm cyberd docker run -d --name=cyberd --restart always --runtime=nvidia \\ -p 26656:26656 -p 26657:26657 -p 26660:26660 \\ -v /cyberd/daemon:/root/.cyberd \\ -v /cyberd/cli:/root/.cyberdcli \\ cyberd/cyberd:\u0026lt;testnet_chain_id\u0026gt;  Don\u0026rsquo;t forget to unjail if you was jailed during update.\n"
    },
    {
        "uri": "/docs/cyberd/setup_dev_env/",
        "title": "",
        "description": "",
        "content": " Setup development environment Prestart  Install Golang 1.11+ Install GoLand IDE  Import project to GoLand Open Project in GoLand by selecting: Open Project -\u0026gt; selecting cloned repository root folder Enable go mod package management Wait for dependency downloading and indexation\nAdd Run Configurations ###Add testnet configuration Add run configuration with GPU Notes about GPU dev environment TO DO  Add run configuration with CPU start --allow-search=true --compute-rank-on-gpu=false --home=./mytestnet/node0/cyberd  Add reset configuration Running Node Generate testnet Before node running, setup testnet with run configuration D TESTNET. - Folder /mytestnet will be added to the project root. - In /node0 subfolder you can find daemon and cli folders. - Daemon folder will contain validator node data. - In /cyberdcli folder you can find initial validator seed.\nmytestnet ├── gentxs │ └── node0.json └── node0 ├── cyberd │ ├── config │ │ ├── config.toml │ │ ├── genesis.json │ │ ├── node_key.json │ │ └── priv_validator_key.json │ └── data │ ├── priv_validator_state.json └── cyberdcli └── key_seed.json  Run with GPU or CPU After, just run RUN node configuration.\nI[2019-05-15|15:06:56.735] Starting ABCI with Tendermint module=main I[2019-05-15|15:06:56.789] Loading mem state module=main I[2019-05-15|15:06:56.789] App loaded module=main time=118.743µs I[2019-05-15|15:06:56.793] Search index loaded! module=main time=3.416449ms I[2019-05-15|15:06:56.793] Search index starting listen new links module=main I[2019-05-15|15:06:56.793] Search index starting listen new rank module=main I[2019-05-15|15:06:56.910] Applying genesis module=main I[2019-05-15|15:06:56.914] File with links not found. Empty set will be used module=main I[2019-05-15|15:06:56.914] Genesis applied module=main time=3.420262ms E[2019-05-15|15:06:56.947] Couldn't connect to any seeds module=p2p I[2019-05-15|15:07:02.014] Executed block module=state height=1 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:02.014] Rank calculated module=main time=2.069µs links=0 cids=0 hash=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 I[2019-05-15|15:07:02.047] Committed state module=state height=1 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:07.078] Executed block module=state height=2 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:07.107] Committed state module=state height=2 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:12.113] Executed block module=state height=3 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:12.144] Committed state module=state height=3 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855 I[2019-05-15|15:07:17.168] Executed block module=state height=4 validTxs=0 invalidTxs=0 I[2019-05-15|15:07:17.207] Committed state module=state height=4 txs=0 appHash=E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855  You may stop, and RUN again I[2019-05-15|14:48:58.191] Starting ABCI with Tendermint module=main I[2019-05-15|14:48:58.343] Loading mem state module=main I[2019-05-15|14:48:58.344] App loaded module=main time=929.472µs I[2019-05-15|14:48:58.399] Search index loaded! module=main time=16.928556ms I[2019-05-15|14:48:58.399] Search index starting listen new links module=main I[2019-05-15|14:48:58.399] Search index starting listen new rank module=main E[2019-05-15|14:48:58.638] Couldn't connect to any seeds module=p2p I[2019-05-15|14:49:03.716] Executed block module=state height=2032 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:03.755] Committed state module=state height=2032 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC I[2019-05-15|14:49:08.759] Executed block module=state height=2033 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:08.793] Committed state module=state height=2033 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC I[2019-05-15|14:49:13.826] Executed block module=state height=2034 validTxs=0 invalidTxs=0 I[2019-05-15|14:49:13.860] Committed state module=state height=2034 txs=0 appHash=1BAA91AD6FD9742B7B094204037F80A8174673BA0FF304D3FF5DFEEAF8FF7DDC  Reset You can reset chains data to genesis at any time by executing RESET run configuration\nI[2019-05-15|15:09:43.338] Removed existing address book module=main file=mytestnet/node0/cyberd/config/addrbook.json I[2019-05-15|15:09:43.345] Removed all blockchain history module=main dir=mytestnet/node0/cyberd/data I[2019-05-15|15:09:43.347] Reset private validator file to genesis state module=main keyFile=mytestnet/node0/cyberd/config/priv_validator_key.json stateFile=mytestnet/node0/cyberd/data/priv_validator_state.json  Exploring Guide to all commands you may to research here: Ultimate cyberd CLI guide\nBefore, build cyberd cli: go build -o cyberdcli ./cli  You will get cyberdcli into you project root\nAdd keys: ./cyberdcli keys add validator --recover  Enter and you protection password-passphrase and mnemocic from file mytestnet/node0/cyberdcli/key_seed.json\n Enter a passphrase to encrypt your key to disk: Repeat the passphrase: \u0026gt; Enter your bip39 mnemonic inhale enforce brand fever core smart draft ceiling among cluster orbit robust tonight elephant below twice goat update uncover employ spider brass consider shiver NAME: TYPE: ADDRESS: PUBKEY: validator local cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns cyberpub1addwnpepq0zm06twxtf7ezv4nj9dhud9ds0fnhkks6qw4g8pdwxzh3evggpvvksh60l  Query status: ./cyberdcli status --indent  { \u0026quot;node_info\u0026quot;: { \u0026quot;protocol_version\u0026quot;: { \u0026quot;p2p\u0026quot;: \u0026quot;7\u0026quot;, \u0026quot;block\u0026quot;: \u0026quot;10\u0026quot;, \u0026quot;app\u0026quot;: \u0026quot;0\u0026quot; }, \u0026quot;id\u0026quot;: \u0026quot;b99f3254757310d1f470f5cd0331b766f2a843f9\u0026quot;, \u0026quot;listen_addr\u0026quot;: \u0026quot;tcp://0.0.0.0:26656\u0026quot;, \u0026quot;network\u0026quot;: \u0026quot;chain-K6U4uZ\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;0.30.1\u0026quot;, \u0026quot;channels\u0026quot;: \u0026quot;4020212223303800\u0026quot;, \u0026quot;moniker\u0026quot;: \u0026quot;node0\u0026quot;, \u0026quot;other\u0026quot;: { \u0026quot;tx_index\u0026quot;: \u0026quot;on\u0026quot;, \u0026quot;rpc_address\u0026quot;: \u0026quot;tcp://0.0.0.0:26657\u0026quot; } }, \u0026quot;sync_info\u0026quot;: { \u0026quot;latest_block_hash\u0026quot;: \u0026quot;8059683636349AF9237FABFD147BAD89C7188571E37E8F09356B1837A88337BA\u0026quot;, \u0026quot;latest_app_hash\u0026quot;: \u0026quot;E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\u0026quot;, \u0026quot;latest_block_height\u0026quot;: \u0026quot;134\u0026quot;, \u0026quot;latest_block_time\u0026quot;: \u0026quot;2019-05-15T09:04:31.768026Z\u0026quot;, \u0026quot;catching_up\u0026quot;: false }, \u0026quot;validator_info\u0026quot;: { \u0026quot;address\u0026quot;: \u0026quot;9C2C13F2B6608BF00BADF501A04E728AC5FF7ADC\u0026quot;, \u0026quot;pub_key\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;tendermint/PubKeyEd25519\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;or7X/1BYcGE1cVX5e3vG9G76JPfXZDKTDg8YL3vtKzo=\u0026quot; }, \u0026quot;voting_power\u0026quot;: \u0026quot;10000000000\u0026quot; } }  Query balance: ./cyberdcli query account cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns  Account: Address: cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns Pubkey: cyberpub1addwnpepq0zm06twxtf7ezv4nj9dhud9ds0fnhkks6qw4g8pdwxzh3evggpvvksh60l Coins: 10000000000000000cyb AccountNumber: 0 Sequence: 1  Query validators: ./cyberdcli query staking validators  Validator Operator Address: cybervaloper18l4v00ar4xsgzc4rr40tfctcjgyp7ppwy3lgak Validator Consensus Pubkey: cybervalconspub1zcjduepq52ld0l6stpcxzdt32huhk77x73h05f8h6ajr9ycwpuvz77ld9vaq6ka2zl Jailed: false Status: Bonded Tokens: 10000000000000000 Delegator Shares: 10000000000000000.000000000000000000 Description: {node0 tst com.com det} Unbonding Height: 0 Unbonding Completion Time: 1970-01-01 00:00:00 +0000 UTC Minimum Self Delegation: 1 Commission: rate: 0.000000000000000000, maxRate: 0.000000000000000000, maxChangeRate: 0.000000000000000000, updateTime: 2019-05-15 08:52:36.324624 +0000 UTC  Add links ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo --chain-id=chain-K6U4uZ ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM --chain-id=chain-K6U4uZ ./cyberdcli link --from=validator --cid-from=QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9 --cid-to=QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy --chain-id=chain-K6U4uZ  {\u0026quot;chain_id\u0026quot;:\u0026quot;chain-K6U4uZ\u0026quot;,\u0026quot;account_number\u0026quot;:\u0026quot;0\u0026quot;,\u0026quot;sequence\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;fee\u0026quot;:{\u0026quot;amount\u0026quot;:null,\u0026quot;gas\u0026quot;:\u0026quot;200000\u0026quot;},\u0026quot;msgs\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;cyberd/Link\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;address\u0026quot;:\u0026quot;cyber18l4v00ar4xsgzc4rr40tfctcjgyp7ppwysdcns\u0026quot;,\u0026quot;links\u0026quot;:[{\u0026quot;from\u0026quot;:\u0026quot;QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9\u0026quot;,\u0026quot;to\u0026quot;:\u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;}]}}],\u0026quot;memo\u0026quot;:\u0026quot;\u0026quot;} confirm transaction before signing and broadcasting [Y/n]: Y Password to sign with 'validator': Response: Height: 1720 TxHash: 68C4F6389D36747A6A609CCDD9D44027A5234850FF065C78D1B1AB3FAC421541 Logs: [{\u0026quot;msg_index\u0026quot;:0,\u0026quot;success\u0026quot;:true,\u0026quot;log\u0026quot;:\u0026quot;\u0026quot;}] GasUsed: 31368 Tags: - action = link  Search and get links with rank: curl -X GET 'localhost:26657/search?cid=\u0026quot;QmbTARMsUw9X2ZEbBaFXRu9JEqNN2g4VZ6DPgtgZH1opy9\u0026quot;'  Links added, rank for them will be computed at next round: { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;cids\u0026quot;: [ { \u0026quot;cid\u0026quot;: \u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;, \u0026quot;rank\u0026quot;: 0 }, { \u0026quot;cid\u0026quot;: \u0026quot;Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM\u0026quot;, \u0026quot;rank\u0026quot;: 0 }, { \u0026quot;cid\u0026quot;: \u0026quot;QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy\u0026quot;, \u0026quot;rank\u0026quot;: 0 } ], \u0026quot;total\u0026quot;: \u0026quot;3\u0026quot;, \u0026quot;page\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;perPage\u0026quot;: \u0026quot;100\u0026quot; } }%  When rank computed: { \u0026quot;jsonrpc\u0026quot;: \u0026quot;2.0\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;result\u0026quot;: { \u0026quot;cids\u0026quot;: [ { \u0026quot;cid\u0026quot;: \u0026quot;QmNWkR2v4ZEzT43xiNKJcFPkFQioGbhqsWcE5qayWQHXAo\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 }, { \u0026quot;cid\u0026quot;: \u0026quot;Qmd7AaekFAxXedSQx3B3h8Wc5aeYPYRiYF83Vjb4tVLkMM\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 }, { \u0026quot;cid\u0026quot;: \u0026quot;QmfSh5obPXmkaTd9aaNCYWxnKHZTH6EYeEh7Hq7xgGnRVy\u0026quot;, \u0026quot;rank\u0026quot;: 0.056093750000000005 } ], \u0026quot;total\u0026quot;: \u0026quot;3\u0026quot;, \u0026quot;page\u0026quot;: \u0026quot;0\u0026quot;, \u0026quot;perPage\u0026quot;: \u0026quot;100\u0026quot; } }  #fuckgoogle "
    },
    {
        "uri": "/docs/cyberd/supported_gpu_list/",
        "title": "",
        "description": "",
        "content": " Supported GPU list for cyberd validators In our cyber protocol implementation on GO proof of relevance root hash is computed on Cuda GPUs every round as the best way to calculate merkle tree faster. We need to load the whole graph in memory for calculating that\u0026rsquo;s why memory volume is important. Currently, with ~2,5 M links GPU memory loaded for 150 Mb, that\u0026rsquo;s mean 1 link is 60 bytes of GPU memory. Accordingly, GPU with 6Gb memory can calculate graph with 100 M links. Under a load of network with 10 M links in a day, this GPU will reach its limit in 10 days.\n|GPU|Supported|Tested|CUDA cores|Memory|Year of production| |-|-|-|-|-|-| |GEFORCE RTX 2080 Ti|:white_check_mark:|:x:|4352|11GB GDDR 6|2018| |GEFORCE RTX 2080)|:white_check_mark:|:x:|4352|11GB GDDR 6|2018| |GEFORCE RTX 2070|:white_check_mark:|:x:|2304|8 GB GDDR6|2019| |GeForce RTX 2060|:white_check_mark:|:x:|1920|6 GB GDDR6|2019| |GEFORCE GTX 1660 Ti|:white_check_mark:|:x:|1536|6GB GDDR6|2019| |GEFORCE GTX 1660|:white_check_mark:|:x:|1408|6GB GDDR5|2019| |GEFORCE GTX 1650|:white_check_mark:|:x:|896|4GB GDDR5|2019| |GeForce GTX 1080|:white_check_mark:|:white_check_mark:|2560|8 GB GDDR5X|2016| |GeForce GTX 980|:white_check_mark:|:x:|2048|4 GB GDDR5|2014| |TITAN Xp|:white_check_mark:|:x:|3840|12 GB GDDR5|2017| |GeForce GTX 1080 Ti|:white_check_mark:|:white_check_mark:|3584|11 GB GDDR5X|2017| |GeForce GTX 980 Ti|:white_check_mark:|:x:|2816|6 GB GDDR5|2015| |GeForce GTX 1070 Ti|:white_check_mark:|:white_check_mark:|2432|8 GB GDDR5|2017| |GeForce GTX 1070|:white_check_mark:|:white_check_mark:|1920|8 GB GDDR5|2016| |GeForce GTX 970|:white_check_mark:|:x:|1664|4 GB GDDR5|2015| |GEFORCE GTX 1060 6GB|:white_check_mark:|:white_check_mark:|1280|6 GB GDDR5|2016| |GeForce GTX 1050 Ti 4GB|:white_check_mark:|:x:|768|4 GB GDDR5|2016| |GeForce GTX 745 (OEM) 4GB|:white_check_mark:|:x:|768|4 GB GDDR3|2014| |GeForce GTX TITAN X|:white_check_mark:|:x:|3072|12 GB GDDR5|2016| |GeForce GTX TITAN Z|:white_check_mark:|:x:|5760|12 GB GDDR5|2014| |GeForce GTX TITAN Black|:white_check_mark:|:x:|2880|6 GB GDDR5|2014| |GeForce GTX 770|:white_check_mark:|:x:|1536|4 GB GDDR5|2013|\nIf you have used some GPU from column supported but without :white_check_mark: at tested column please submit a pull request with corrections. If you have tested GPU and it\u0026rsquo;s not contained in that list submit PR too.\n"
    },
    {
        "uri": "/docs/cyberd/ultimate-commands-guide_v2/",
        "title": "",
        "description": "",
        "content": " Ultimate cyberd CLI guide. Testnet: Euler-3 If something wrong\u0026hellip; First of all I would like to encourage you to use --help feature if you want to get better experience of using cyberdcli. This is really easy way to find all necessary commands with options and flags.\nFor example you can enter:\ndocker exec cyberd cyberdcli --help  You should see this message:\nCommand line interface for interacting with cyberd Usage: cyberdcli [command] Available Commands: status Query remote node for status query Querying subcommands tx Transactions subcommands keys Add or view local private keys rest-server Start LCD (light-client daemon), a local REST server version Print the app version link Create and sign a link tx help Help about any command Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding (hex|b64|btc) (default \u0026quot;hex\u0026quot;) -h, --help help for cyberdcli --home string directory for config and data (default \u0026quot;/root/.cyberdcli\u0026quot;) -o, --output string Output format (text|json) (default \u0026quot;text\u0026quot;) --trace print out full stack trace on errors  Help feature working as a stairs - you can use it with any command to find available options, subcommands and flags. For example lets explore query subcommands:\ndocker exec cyberd cyberdcli query --help  now, you can see subcommand structure:\nUsage: cyberdcli query [command]  and available subcommands and flags:\nAvailable Commands: tendermint-validator-set Get the full tendermint validator set at given height block Get verified data for a the block at given height txs Search for all transactions that match the given tags. tx Matches this txhash over all committed blocks account Query account balance gov Querying commands for the governance module distr Querying commands for the distribution module staking Querying commands for the staking module slashing Querying commands for the slashing module Flags: -h, --help help for query Global Flags: --chain-id string Chain Id of cyberd node -e, --encoding string Binary encoding (hex|b64|btc) (default \u0026quot;hex\u0026quot;) --home string directory for config and data (default \u0026quot;/root/.cyberdcli\u0026quot;) -o, --output string Output format (text|json) (default \u0026quot;text\u0026quot;) --trace print out full stack trace on errors  Alright, lets explore account subcommand:\ndocker exec cyberd cyberdcli query account --help  Now we see all options available at this subcommands, namely, account address and flags:\nUsage: cyberdcli query account [address] [flags]  In most cases you need just two extra flags:\n--from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  That it. This is very useful ability for using cyberdcli and troubleshooting.\nGlossary Bandwidth - The recovered unit of your account. Used to complete transactions in the cyberd blockchain. The amount of your bandwidth calculates like:\nyour_cyb_tokens / all_cyb_tokens_in_cyberd * 2000*1000*100.\nMessages cost is 500 (exclude link). Transaction consists of one or more messages m_1, m_2, ..., m_n. Transaction cost is 300 + c_1 + c_2 ... + c_n, where c_i - cost of m_i message. Full bandwidth regeneration time is 86400 blocks (24 hours)\ncommission - tokens that you\u0026rsquo;ve earned with validation. You can take them at any time.\nilliquid tokens - non-transferable tokens that you\u0026rsquo;ve delegated to the validator. Delegation process duration - 1 block. Unbonding process, or taking back share - 3 weeks.\nlink - reference between CID key and CID value. Link message cost is 100*n, where n is quantity of links in message. Link finalization time is 1 block. New rank for CIDs of link will be recalculated at period from 100 to 200 blocks (from 100 to 200 seconds).\nliquid tokens - transferable tokens in cyberd blockchain\nlocal keystore - store with keys in you local machine\nrewards - tokens that you\u0026rsquo;ve earned with the delegation. To reduce network loads all rewards storing in a pool. You can take your part of bounty at any time by commands at delegator section.\n - the commission that validator get for the work. Must be fraction \u0026gt;0 and \u0026lt;=1\n - delegator address. Starts with cyber most often coinciding with \n - account address. Starts with cyber\n - name of account in cybercli\n - validator address. Starts with cybervaloper\n - the part of illiquid tokens that you want to unbonding or redelegate. Must be fraction \u0026gt;0 and \u0026lt;=1\n - version of testnet.\nGeneral commands Show all validators Return set of all active and jailed validators.\ndocker exec cyberd cyberdcli query staking validators --trust-node  Show chain status Return general chain information\ndocker exec cyberd cyberdcli status --indent  Distribution params docker exec cyberd cyberdcli query distr params --trust-node  The amount of outstanding rewards Return the sum of rewards in a pool\ndocker exec cyberd cyberdcli query distr outstanding-rewards --trust-node  Staking params Chain staking info\ndocker exec cyberd cyberdcli query staking params --trust-node  Staking pool docker exec cyberd cyberdcli query staking pool --trust-node  Account management Import an account by seed phrase and store it in local keystore docker exec -ti cyberd cyberdcli keys add \u0026lt;your_key_name\u0026gt; --recover  Import an account by private key and store it in local keystore (private key could be your ETH private key) docker exec -ti cyberd cyberdcli keys add import_private \u0026lt;your_key_name\u0026gt;  Create a new account docker exec -ti cyberd cyberdcli keys add \u0026lt;your_key_name\u0026gt;  Show account information Name, address and public key of current account\ndocker exec cyberd cyberdcli keys show \u0026lt;your_key_name\u0026gt;  Show account balance. Return account number, balance, public key in 16 and sequence. \u0026gt;Don\u0026rsquo;t work if from current account no outgoing transactions. Issue in progress\ndocker exec cyberd cyberdcli query account \u0026lt;your_key_address\u0026gt;  List existing keys Return all keys in cyberdcli\ndocker exec cyberd cyberdcli keys list  Delete account from cybercli docker exec -ti cyberd cyberdcli keys delete \u0026lt;deleting_key_name\u0026gt;  Update account password docker exec -ti cyberd cyberdcli keys update \u0026lt;your_key_name\u0026gt;  Send tokens docker exec -ti cyberd cyberdcli tx send \u0026lt;to_address\u0026gt; \u0026lt;amount_cyb\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Linking content  Just ipfs hashes available as a CID\n docker exec -ti cyberd cyberdcli link \\ --from=\u0026lt;your_key_name\u0026gt; \\ --cid-from=\u0026lt;key_phrase_to_link\u0026gt; \\ --cid-to=\u0026lt;content_that_you_want_to_link\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Validator commands Get all validators docker exec cyberd cyberdcli query staking validators \\ --trust-node  The amount of commission Available to withdraw validator commission.\ndocker exec cyberd cyberdcli query distr commission \u0026lt;operator_address\u0026gt;  State of current validator docker exec cyberd cyberdcli query staking validator \u0026lt;operator_address\u0026gt;  Return all delegations to validator docker exec cyberd cyberdcli query staking delegations-to \u0026lt;operator_address\u0026gt;  Edit commission in existing validator account docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from=\u0026lt;your_key_name\u0026gt; \\ --commission-rate=\u0026lt;new_comission_rate_percentage\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Withdraw commission for either a delegation docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \u0026lt;operator_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt; \\ --commission  Edit site and description in existing validator account  Will be available at description section\n docker exec -ti cyberd cyberdcli tx staking edit-validator \\ --from=\u0026lt;your_key_name\u0026gt; \\ --details=\u0026quot;\u0026lt;description\u0026gt;\u0026quot; \\ --website=\u0026lt;your_website\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Unjail validator previously jailed for downtime docker exec -ti cyberd cyberdcli tx slashing unjail \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Get info about redelegation process from validator docker exec -ti cyberd cyberdcli query staking redelegations-from \u0026lt;operator_address\u0026gt;  Delegator commands Return distribution delegator rewards according current validator docker exec -ti cyberd cyberdcli query distr rewards \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Return delegator shares with current validator docker exec -ti cyberd cyberdcli query staking delegation \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Return all delegations made from one delegator docker exec -ti cyberd cyberdcli query staking delegations \u0026lt;delegator_address\u0026gt;  Return all unbonding delegatations from a validator docker exec -ti cyberd cyberdcli query staking unbonding-delegations-from \u0026lt;operator_address\u0026gt;  Withdraw rewards for either a delegation docker exec -ti cyberd cyberdcli tx distr withdraw-rewards \u0026lt;operator_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Withdraw all delegation rewards docker exec -ti cyberd cyberdcli tx distr withdraw-all-rewards \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Change the default withdraw address for rewards associated with an address docker exec -ti cyberd cyberdcli tx distr set-withdraw-addr \u0026lt;your_new_address\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Delegate liquid tokens to a validator docker exec -ti cyberd cyberdcli tx staking delegate \u0026lt;operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; \\ --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Redelegate illiquid tokens from one validator to another in absolute cyb value  3 weeks for redelegation. Amount must be less than already delegated.\n docker exec -ti cyberd cyberdcli tx staking redelegate \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Redelegate illiquid tokens from one validator to another in percentages  3 weeks for redelegation.\n docker exec -ti cyberd cyberdcli tx staking redelegate \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt; \u0026lt;shares_percentage\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Unbond shares from a validator in absolute cyb value  3 weeks unbonding.\n docker exec -ti cyberd cyberdcli tx staking unbond \u0026lt;operator_address\u0026gt; \u0026lt;amount_cyb\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Unbond shares from a validator in percentages  3 weeks unbonding.\n docker exec -ti cyberd cyberdcli tx staking unbond \u0026lt;operator_address\u0026gt; \u0026lt;shares_percentage\u0026gt; --from=\u0026lt;your_key_name\u0026gt; \\ --chain-id=\u0026lt;testnet_chain_id\u0026gt;  Get info about unbonding delegation process to current validator docker exec -ti cyberd cyberdcli query staking unbonding-delegation \u0026lt;delegator_address\u0026gt; \u0026lt;operator_address\u0026gt;  Get info about unbonding delegation process to all unbonded validators docker exec -ti cyberd cyberdcli query staking unbonding-delegation \u0026lt;delegator_address\u0026gt;  Get info about redelegation process from to current validator docker exec -ti cyberd cyberdcli query staking redelegation \u0026lt;delegator_address\u0026gt; \u0026lt;old_operator_address\u0026gt; \u0026lt;new_operator_address\u0026gt;  Get info about all redelegation processes by one delegator docker exec -ti cyberd cyberdcli query staking redelegations \u0026lt;delegator_address\u0026gt;  "
    },
    {
        "uri": "/docs/examples/",
        "title": "",
        "description": "",
        "content": " Ubi loqui Mentem genus facietque salire tempus bracchia Lorem markdownum partu paterno Achillem. Habent amne generosi aderant ad pellem nec erat sustinet merces columque haec et, dixit minus nutrit accipiam subibis subdidit. Temeraria servatum agros qui sed fulva facta. Primum ultima, dedit, suo quisque linguae medentes fixo: tum petis.\nRapit vocant si hunc siste adspice Ora precari Patraeque Neptunia, dixit Danae Cithaeron armaque maxima in nati Coniugis templis fluidove. Effugit usus nec ingreditur agmen ac manus conlato. Nullis vagis nequiquam vultibus aliquos altera suum venis teneas fretum. Armos remotis hoc sine ferrea iuncta quam!\nLocus fuit caecis Nefas discordemque domino montes numen tum humili nexilibusque exit, Iove. Quae miror esse, scelerisque Melaneus viribus. Miseri laurus. Hoc est proposita me ante aliquid, aura inponere candidioribus quidque accendit bella, sumpta. Intravit quam erat figentem hunc, motus de fontes parvo tempestate.\niscsi_virus = pitch(json_in_on(eupViral), northbridge_services_troubleshooting, personal( firmware_rw.trash_rw_crm.device(interactive_gopher_personal, software, -1), megabit, ergonomicsSoftware(cmyk_usb_panel, mips_whitelist_duplex, cpa))); if (5) { managementNetwork += dma - boolean; kilohertz_token = 2; honeypot_affiliate_ergonomics = fiber; } mouseNorthbridge = byte(nybble_xmp_modem.horse_subnet( analogThroughputService * graphicPoint, drop(daw_bit, dnsIntranet), gateway_ospf), repository.domain_key.mouse(serverData(fileNetwork, trim_duplex_file), cellTapeDirect, token_tooltip_mashup( ripcordingMashup))); module_it = honeypot_driver(client_cold_dvr(593902, ripping_frequency) + coreLog.joystick(componentUdpLink), windows_expansion_touchscreen); bashGigabit.external.reality(2, server_hardware_codec.flops.ebookSampling( ciscNavigationBacklink, table + cleanDriver), indexProtocolIsp);  Placabilis coactis nega ingemuit ignoscat nimia non Frontis turba. Oculi gravis est Delphice; inque praedaque sanguine manu non.\nif (ad_api) { zif += usb.tiffAvatarRate(subnet, digital_rt) + exploitDrive; gigaflops(2 - bluetooth, edi_asp_memory.gopher(queryCursor, laptop), panel_point_firmware); spyware_bash.statePopApplet = express_netbios_digital( insertion_troubleshooting.brouter(recordFolderUs), 65); } recursionCoreRay = -5; if (hub == non) { portBoxVirus = soundWeb(recursive_card(rwTechnologyLeopard), font_radcab, guidCmsScalable + reciprocalMatrixPim); left.bug = screenshot; } else { tooltipOpacity = raw_process_permalink(webcamFontUser, -1); executable_router += tape; } if (tft) { bandwidthWeb *= social_page; } else { regular += 611883; thumbnail /= system_lag_keyboard; }  Caesorum illa tu sentit micat vestes papyriferi Inde aderam facti; Theseus vis de tauri illa peream. Oculos uberaque non regisque vobis cursuque, opus venit quam vulnera. Et maiora necemque, lege modo; gestanda nitidi, vero? Dum ne pectoraque testantur.\nVenasque repulsa Samos qui, exspectatum eram animosque hinc, aut manes, Assyrii. Cupiens auctoribus pariter rubet, profana magni super nocens. Vos ius sibilat inpar turba visae iusto! Sedes ante dum superest extrema.\n"
    },
    {
        "uri": "/docs/hidden/",
        "title": "",
        "description": "",
        "content": " This page is hidden in menu Quondam non pater est dignior ille Eurotas Latent te facies Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired));  "
    },
    {
        "uri": "/docs/js-amino/changelog/",
        "title": "",
        "description": "",
        "content": " Change Log Unreleased Closed issues:\n The instance.constructor.name cannot get correct result, when I use babel-loader transformed. #47 Question: Cosmos SDK types library #41 Encoding of default values #27 Converting type to typ3 with considering options. #24 Typo on field options #23 webpack babel package error #17 publish to npm #16 Add options for encode/decode Like Go-Amino #14 Encoding int32, int64 to signed varint? #9 Bug when encoding byte slice #8 Can I create slice of interface? #7 How to create slice of structs? #6 Is this repo maintained? #5 Need to provide unit test #3 Support encode and decode with int32,int64,int16 - The same feature for unsigned integer #2 Add examples #1  Merged pull requests:\n Fixed typo in variable name #45 (jordansexton) FieldOtions -\u0026gt; FieldOptions #43 (jordansexton) Rename comos_base_account.js to cosmos_base_account.js #42 (jordansexton) 30 add ci components for release #40 (SaveTheAles) 30 add ci components for release #39 (SaveTheAles) docs for first major release #38 (litvintech) docs: add ethanfrey as a contributor #37 (allcontributors[bot]) docs: add cyberadmin as a contributor #36 (allcontributors[bot]) docs: add litvintech as a contributor #35 (allcontributors[bot]) docs: add SaveTheAles as a contributor #34 (allcontributors[bot]) docs: add philipstanislaus as a contributor #33 (allcontributors[bot]) docs: add TanNgocDo as a contributor #32 (allcontributors[bot]) docs: add Thunnini as a contributor #31 (allcontributors[bot]) Fixed default encoding #28 (litvintech) Add test interface array #26 (Thunnini) Fix encoding int32, 64 to binFixed #25 (Thunnini) Support test for simple struct #22 (Thunnini) Initial support testing #20 (Thunnini) add int16 encoding #19 (Thunnini) Add documentation, fix broken examples #18 (philipstanislaus) Experimentally support json encoding/decoding #13 (Thunnini) Add support to encode, decode utf8 #12 (Thunnini)  * This Change Log was automatically generated by github_changelog_generator\n"
    },
    {
        "uri": "/docs/js-amino/contributing/",
        "title": "",
        "description": "",
        "content": " Contributing to js-amino Thank you for considering a contribution to js-amino! This guide explains how to: * Get started * Development workflow * Get help if you encounter trouble\nGet in touch Before starting to work on a feature or a fix, please open an issue to discuss the use case or bug with us. This can save both you and us a lot of time. For any non-trivial change, we\u0026rsquo;ll ask you to create a short design document explaining:\n Why is this change done? What\u0026rsquo;s the use case? What test cases should it have? What could go wrong? How will it roughly be implemented? (We\u0026rsquo;ll happily provide code pointers to save you time)  Development Workflow Fork repo Fork repo to your account to continue work there.\nCreating Commits And Writing Commit Messages The commit messages that accompany your code changes are an important piece of documentation, please follow these guidelines when writing commit messages:\n Keep commits discrete: avoid including multiple unrelated changes in a single commit Keep commits self-contained: avoid spreading a single change across multiple commits. A single commit should make sense in isolation Include GitHub issue in the commit message on a first line at the beginning. Example:  #123 Refactor CONTRIBUTING.md --Add Creating Commits And Writing Commit Messages Section  Submitting Your Change After you submit your pull request, a core developer will review it. It is normal that this takes several iterations, so don\u0026rsquo;t get discouraged by change requests. They ensure the high quality that we all enjoy.\nGetting Help If you run into any trouble, please reach out to us on the issue you are working on.\nOur Thanks We deeply appreciate your effort toward improving js-amino. For any contribution, large or small, you will be immortalized in the release notes for the version you\u0026rsquo;ve contributed to.\n"
    },
    {
        "uri": "/docs/js-amino/overview/",
        "title": "",
        "description": "",
        "content": "   An Implementation of Amino for clients with Javascript Current state: 1.0.0 First major public release \n\nFor more information spec, please refer: https://github.com/tendermint/go-amino\nFeatures:  Encode and Decode simple types: ints 8/16/32/64, booleans, strings, bytes Encode and Decode recursive Structs and Interfaces, Arrays Encode simple Time data  Install From NPM: Run npm i js-amino\nInstall From Source  Run npm install  Running The Examples  cd src/examples go get Run examples, e. g. in Go: go run string.go and in JS node string.js  Running The Unit Test  Run npm test  Usage (MsgMultiSend example) const { Codec, FieldOptions, TypeFactory, Utils, Types, WireTypes, } = require('../index'); let StdTx = TypeFactory.create('StdTx', [{ name: 'msg', type: Types.ArrayInterface, }, { name: 'fee', type: Types.Struct, }, { name: 'signatures', type: Types.ArrayStruct, }, { name: 'memo', type: Types.String, }, ]); let MsgMultiSend = TypeFactory.create('MsgMultiSend', [{ name: \u0026quot;inputs\u0026quot;, type: Types.ArrayStruct }, { name: \u0026quot;outputs\u0026quot;, type: Types.ArrayStruct } ]); let Coin = TypeFactory.create('coin', [{ name: 'denom', type: Types.String, }, { name: 'amount', type: Types.String, } ]); let Input = TypeFactory.create('input', [{ name: 'address', type: Types.String, }, { name: 'coins', type: Types.ArrayStruct, } ]); let Output = TypeFactory.create('output', [{ name: 'address', type: Types.String, }, { name: 'coins', type: Types.ArrayStruct, } ]); let Fee = TypeFactory.create('fee', [{ name: 'amount', type: Types.ArrayStruct, }, { name: 'gas', type: Types.Int64, } ]); let PubKeySecp256k1 = TypeFactory.create('PubKeySecp256k1', [{ name: 's', type: Types.ByteSlice, }], Types.ByteSlice) let Signature = TypeFactory.create('signature', [{ name: 'pub_key', type: Types.Interface, }, { name: 'signature', type: Types.ByteSlice, } ]) let codec = new Codec(); codec.registerConcrete(new StdTx(), 'auth/StdTx', {}); codec.registerConcrete(new MsgMultiSend(), 'cosmos-sdk/MsgMultiSend', {}); codec.registerConcrete(new PubKeySecp256k1(), 'tendermint/PubKeySecp256k1', {}); let coin = new Coin('cyb', \u0026quot;10000\u0026quot;); let addressFrom = [ 59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186 ] let addressTo = [ 94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168 ] let input = new Input(addressFrom, [coin]); let output = new Output(addressTo, [coin]); let sendMultiMsg = new MsgMultiSend([input], [output]); let fee = new Fee([new Coin('cyb', '0')], 200000); let pubKey = new PubKeySecp256k1([2,27,24,0,255,96,147,21,64,29,132,192,108,219,59,134,206,201,126,224,63,160,24,236,170,124,164,95,43,180,6,246,250]); let signature = [165,76,109,61,53,129,190,147,52,224,34,106,235,208,224,36,190,25,204,36,226,129,97,109,35,130,217,228,144,106,10,134,14,183,95,252,219,235,22,92,37,53,3,89,111,173,12,158,146,71,82,113,236,241,170,121,217,20,236,23,131,35,80,29]; let sig = new Signature(pubKey, signature); let stdTx = new StdTx([sendMultiMsg], fee, [sig], 'elonmusk'); let jsonTx = codec.marshalJson(stdTx); let decodedDataTx = new StdTx(); console.log(\u0026quot;Binary stdTx:\\n\u0026quot;, (codec.marshalBinary(stdTx)).toString()); console.log(\u0026quot;Json:\\n\u0026quot;, jsonTx); codec.unMarshalBinary(codec.marshalBinary(stdTx), decodedDataTx); console.log(\u0026quot;Decoded data:\\n\u0026quot;, decodedDataTx.JsObject());  Binary stdTx: 220,1,240,98,93,238,10,80,194,104,154,209,10,36,10,20,59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186,18,12,10,3,99,121,98,18,5,49,48,48,48,48,18,36,10,20,94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168,18,12,10,3,99,121,98,18,5,49,48,48,48,48,18,14,10,8,10,3,99,121,98,18,1,48,16,192,154,12,26,106,10,38,235,90,233,135,33,2,27,24,0,255,96,147,21,64,29,132,192,108,219,59,134,206,201,126,224,63,160,24,236,170,124,164,95,43,180,6,246,250,18,64,165,76,109,61,53,129,190,147,52,224,34,106,235,208,224,36,190,25,204,36,226,129,97,109,35,130,217,228,144,106,10,134,14,183,95,252,219,235,22,92,37,53,3,89,111,173,12,158,146,71,82,113,236,241,170,121,217,20,236,23,131,35,80,29,34,8,101,108,111,110,109,117,115,107 Json: {\u0026quot;type\u0026quot;:\u0026quot;auth/StdTx\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;msg\u0026quot;:[{\u0026quot;type\u0026quot;:\u0026quot;cosmos-sdk/MsgMultiSend\u0026quot;,\u0026quot;value\u0026quot;:{\u0026quot;inputs\u0026quot;:[{\u0026quot;address\u0026quot;:[59,58,243,13,132,163,164,202,233,7,236,93,136,166,181,175,236,69,48,186],\u0026quot;coins\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;10000\u0026quot;}]}],\u0026quot;outputs\u0026quot;:[{\u0026quot;address\u0026quot;:[94,222,114,42,196,107,51,203,139,142,219,243,137,60,54,250,139,153,46,168],\u0026quot;coins\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;10000\u0026quot;}]}]}}],\u0026quot;fee\u0026quot;:{\u0026quot;amount\u0026quot;:[{\u0026quot;denom\u0026quot;:\u0026quot;cyb\u0026quot;,\u0026quot;amount\u0026quot;:\u0026quot;0\u0026quot;}],\u0026quot;gas\u0026quot;:\u0026quot;200000\u0026quot;},\u0026quot;signatures\u0026quot;:[{\u0026quot;pub_key\u0026quot;:{\u0026quot;type\u0026quot;:\u0026quot;tendermint/PubKeySecp256k1\u0026quot;,\u0026quot;value\u0026quot;:\u0026quot;AhsYAP9gkxVAHYTAbNs7hs7JfuA/oBjsqnykXyu0Bvb6\u0026quot;},\u0026quot;signature\u0026quot;:\u0026quot;pUxtPTWBvpM04CJq69DgJL4ZzCTigWFtI4LZ5JBqCoYOt1/82+sWXCU1A1lvrQyekkdScezxqnnZFOwXgyNQHQ==\u0026quot;}],\u0026quot;memo\u0026quot;:\u0026quot;elonmusk\u0026quot;}} Decoded data: { msg: [ { inputs: [Array], outputs: [Array] } ], fee: { amount: [ [Object] ], gas: 200000 }, signatures: [ { pub_key: [Array], signature: [Array] } ], memo: 'elonmusk' }  Contributing Guide Contribution are welcome! Please read this guide before contributing.\nThis project follows the all-contributors specification. Contributions of any kind welcome!\nLicense Code are licensed under MIT license by contributors\n"
    },
    {
        "uri": "/docs/server/",
        "title": "",
        "description": "",
        "content": " Nimium sacravere cetera exorata multifidasque satia Datum perierunt nato Lorem markdownum. Sit en turpe, recessit nominibus et sanguis totis. Unaque cognitius docuit sensimus mutasse terra flammas. Nec nunc sustinet Coeranon figura Erecthida saepe gestu vel: quod mei. Docto interdum quasi labefactus nocentius miserrimus pars cum missi matrem, ipse fletus illo super.\n Metuunt non paene iniectis licuit Extemplo iugulum relictis reddidit caput Frustra adspiceres viae Non fluctibus civiliter pater procedit non Deos spumis ille aderam semper Stygios quantum Orgia hoc  Dare hirtus cervice Cecropis Si veteris alas proelia, sic remotis in portus nisi minimae acerris carina: et ne. Crimina longis, visae, quae et cur innuba dabat Haedis non. Multorumque damus qua, circumtulit teli, nec cum ait, o procul miserabile cursus. Tuam Rhodanumque ipse scelus humum fratrem volucrumque tandem seque domus fuerat quam per quidem ululasse ab aquas vocari.\n Inperfecta frugum sed perennis deposuit Quem cortice penthea venerisque perque perque deditque Cerno impete  Daedalon inguina mea Autolycus caeleste lumina et Cupiere adulter parentum, semineces malit nec seu luce superos integer inritaturque antro cum. Aegeus sic tabe nulla satyri notissima inmensa et aquas et. Digiti quis addit materna, et arma tu aegide dixit. Traxerat ubera, fuit se cacumine praeteritae corpore esse pendentem Diana gratissima dolor generi clamoribus occupat; flavam arma. Ponat invidiosa honores.\nvar nybble_computer_market = client_sd_webmail.margin(romGamma(nui, internet, 78) + p_malware_algorithm(thyristorCloneBare, backup, multicastingHsf)); circuit(thickDesktopPpm, computer(protocol_alert(sla))); if (integrated_memory_rich(array_printer.thermistor_lock_web( camera.gnu_read_engine.third(4, rom_point_risc), piracy( paste_analyst, os, multiprocessingKilohertz)))) { click_samba = 1; }  Liber virorum acervo quaecumque placabat Luna recessit utque, nox cum nymphae licet? Arce tibi commissus letalis ambo fuit bis deus? Dixit mea, non Quid potentior osculaque factis opposuitque semel perspexerat posuitque parte quas sive.\n"
    },
    {
        "uri": "/docs/shortcodes/",
        "title": "",
        "description": "",
        "content": " Expand shortcode Default {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label {{\u0026lt; expand \u0026quot;Custom Label\u0026quot; \u0026quot;...\u0026quot; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    Buttons {{\u0026lt; button relref=\u0026quot;/\u0026quot; \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026quot;https://github.com/alex-shpak/hugo-book\u0026quot; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}   Get Home Contribute Tabs {{\u0026lt; tabs \u0026quot;uniqueid\u0026quot; \u0026gt;}} {{\u0026lt; tab \u0026quot;MacOS\u0026quot; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026quot;Linux\u0026quot; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026quot;Windows\u0026quot; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}}  MacOS  MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Linux  Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n Windows  Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n  \nColumns {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}}  Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "
    },
    {
        "uri": "/docs/sub-section/ego-numen/",
        "title": "",
        "description": "",
        "content": " Ego numen obest Mors curru Iove pedibus curva humano salutem Lorem markdownum, mole, profugus. Madida ne quantus, pars verba lacrimis memorique longius cupidi ipse attrahit et. Vota liberiore rector suos fallit videor iustissimus barbara quod habet. Tantum patriaeque omnia spectes inimica mari nec spemque ululare: nuper quodque, sic, quo.\nvar php_wireless = 4; siteWinsock.switch_inbox += so_control_logic; if (target_website.bugCopyrightIcs.cms_digital_method(mca_active) \u0026gt; cloneScrollHttps) { https_drop_hard(97, sshPayload + autoresponder_bmp_file); hypertextCommercialBookmark = optical_impact; } architecture = userRate.unfriend(petabyteFile(irc, wave, logic_tag.impact.cookie_favorites(5, 83)), listserv, malware_cad( disk));  Populi annum deprendere suae recumbis in sedem starent! Super non accedat percepitque negare inconcessisque habitare: puerum: picta. Haec natamque, in rubentem auctore quantas oetaeas certamine levatae sollicitumque mecum vultu obstructaque. Limina subtemen qui trepidare virgine! Enim rumor paenituit haec crimine Melampus sidus.\nPartem robora herbae ilice hic exspectatus tepidique Heu fugit carne, illo ex Iunonis ut tempora sacrata, adhaesi. Fallunt eque amnes!\n Vile ille res sidera gaudebat felicia auxilium Sacra curam adfusique vasti progenitore omnia nutantem Quod notum spesque extentam fores in voces In qualia aequo Auro commoda Mearum huic volucres locorum formosus  Invidiae fidemque cogamque esset potentia Minos Sub silicem, semesaque nec, pone pariterque tendentem, in pactae suarum recurvas et contra tu minister via. Subducere tangeris neque coniunxque utque. Virga altam, mortemque: ubi procul, et vidi committit. Et Alpheos! Perfide age magna per aequor abstulerat, Boeotia sentit succincta ad linquit confugisse certae, de dignatur et!\n Sic nacta saxo crura, iustis rorantia premens tempora lecte sumpsisse nusquam ulvam, apta! Sed sub plumas consueta quae; tibi mihi nec committi mundi?\n Ipsa dea serpentum illic; aspicit reticere Aeaciden mitto; est novis exul. Invidit senior vela, cava sed plumae vident ille ipse domo litus ac fallere lumina, nisi famem cycno.\nNunc miserata admisitque nata, cum loco, iacerent, te medullas matres. Fraude tamen, prorumpit puerum primo polus regalia pampineis iungunt nec, aderis replent carituraque cervus. Primusque lapides ad inpia pedibus; non fare praeterit penetralia in pedum uror. Rapitur vivis lacrimis, vena et dixit.\n"
    },
    {
        "uri": "/docs/sub-section/natusque/",
        "title": "",
        "description": "",
        "content": " Natusque putat tu vero Scylaceaque neve coepisse Lorem markdownum hostem et addit arbusta iacuit laetissimus medio, quae quoque faciente. Belli et fuerant fuerat, curas Abas equos sacerdos iactasque videndo tanto, sub. Et simulasse caedis, est nec acre addiderat, manet Phrygiae quisquam, ater, aura sua deique cornua. Bacchi dixi cum tollit, ad sinistra mirum, non se dis fraudare in decimo vocet. Ducunt Acrisio sine ratem: enim illas venti, ferit nam ora.\n Crescente cernis ritusque et vertice potui, fugam conferat enim, quin te Iuno, Calydonia! Cursum est suo lassant quam cutis virgo urbe illa auras, finem. Trabem est secedere Bybli laudant quercus tribuitque relinque et cornua ora, et quoniam maledicere viscera caelobracchia omne hoc. Metaque Arcas patet intraverat tenet.\n Silvisque primae tulisset sive sonuere, incola visa veniat temptantes spernimur et dictis se. Sub gerunt. Aqua tantum templi peregrinis ut aevo cuique falsi, ibat avidae transitus.\nModo auctor imbres est Clanis cernere monstravit illic quoque, in ignis male una deme? Alta sonanti relatus Pindo: nisi Pico edidit data tamen rurigenae avoque. Quotiens vela petis inposuit et parte utque, tempus pars contendere facturus tumidus. Flores culpavit fera retinens, vita puer publica ferebat positas.\nif (mashupTopologyMnemonic(70) \u0026gt;= domain_correction_schema) { romTeraflops = log_android; mms_vrml_alignment(keyboard, oop, computerCodec); } retina_samba_arp *= desktop_itunes_mainframe(leopard, 511935) * 88 / direct_excel(-3, infringement_bespoke_apache, cmyk); drivePowerPlay.registryAix += dma; text_data.upsOdbc = error(user(processor_token_forum) * art_ajax_ldap);  Patriaque volvitur scire Naryciusque iuvenem dixit adfusique bicorni cupido. Tecumque corpore sublato, mox hostibus et muneris, non. Draconum noscit dapibus scopulis spondere lupum diro, illo ille victoque cibis; umentia spes.\nAlumno est postquam gracili adnuimusque ore est praemia, ulla patitur: te disce erat cruribus prosunt. Arboris illis neque, et erubuit Gallicus: iam remisit adimuntque adsuerat nolit attonitus! Torvamque sensi ut fecundo fortuna bracchia fuerant, semper de manet inseris.\nIctibus in cursus in, in isque Polyxena et Solis oris pressa exclamat in tori lactente. Locoque iam fata Stygia lege transire.\n"
    },
    {
        "uri": "/docs/with-toc/",
        "title": "",
        "description": "",
        "content": " Caput vino delphine in tamen vias Cognita laeva illo fracta Lorem markdownum pavent auras, surgit nunc cingentibus libet Laomedonque que est. Pastor An arbor filia foedat, ne fugit aliter, per. Helicona illas et callida neptem est Oresitrophos caput, dentibus est venit. Tenet reddite famuli praesentem fortibus, quaeque vis foret si frondes gelidos gravidae circumtulit inpulit armenta nativum.\n Te at cruciabere vides rubentis manebo Maturuit in praetemptat ruborem ignara postquam habitasse Subitarum supplevit quoque fontesque venabula spretis modo Montis tot est mali quasque gravis Quinquennem domus arsit ipse Pellem turis pugnabant locavit  Natus quaerere Pectora et sine mulcere, coniuge dum tincta incurvae. Quis iam; est dextra Peneosque, metuis a verba, primo. Illa sed colloque suis: magno: gramen, aera excutiunt concipit.\n Phrygiae petendo suisque extimuit, super, pars quod audet! Turba negarem. Fuerat attonitus; et dextra retinet sidera ulnas undas instimulat vacuae generis? Agnus dabat et ignotis dextera, sic tibi pacis feriente at mora euhoeque comites hostem vestras Phineus. Vultuque sanguine dominoque metuit risi fama vergit summaque meus clarissimus artesque tinguebat successor nominis cervice caelicolae.\n Limitibus misere sit Aurea non fata repertis praerupit feruntur simul, meae hosti lentaque citius levibus, cum sede dixit, Phaethon texta. Albentibus summos multifidasque iungitur loquendi an pectore, mihi ursaque omnia adfata, aeno parvumque in animi perlucentes. Epytus agis ait vixque clamat ornum adversam spondet, quid sceptra ipsum est. Reseret nec; saeva suo passu debentia linguam terga et aures et cervix de ubera. Coercet gelidumque manus, doluit volvitur induta?\nEnim sua Iuvenilior filia inlustre templa quidem herbis permittat trahens huic. In cruribus proceres sole crescitque fata, quos quos; merui maris se non tamen in, mea.\nGermana aves pignus tecta Mortalia rudibusque caelum cognosceret tantum aquis redito felicior texit, nec, aris parvo acre. Me parum contulerant multi tenentem, gratissime suis; vultum tu occupat deficeret corpora, sonum. E Actaea inplevit Phinea concepit nomenque potest sanguine captam nulla et, in duxisses campis non; mercede. Dicere cur Leucothoen obitum?\nPostibus mittam est nubibus principium pluma, exsecratur facta et. Iunge Mnemonidas pallamque pars; vere restitit alis flumina quae quoque, est ignara infestus Pyrrha. Di ducis terris maculatum At sede praemia manes nullaque!\n"
    },
    {
        "uri": "/docs/without-toc/",
        "title": "",
        "description": "",
        "content": " At me ipso nepotibus nunc celebratior genus Tanto oblite Lorem markdownum pectora novis patenti igne sua opus aurae feras materiaque illic demersit imago et aristas questaque posset. Vomit quoque suo inhaesuro clara. Esse cumque, per referri triste. Ut exponit solisque communis in tendens vincetis agisque iamque huic bene ante vetat omina Thebae rates. Aeacus servat admonitu concidit, ad resimas vultus et rugas vultu dignamque Siphnon.\nQuam iugulum regia simulacra, plus meruit humo pecorumque haesit, ab discedunt dixit: ritu pharetramque. Exul Laurenti orantem modo, per densum missisque labor manibus non colla unum, obiectat. Tu pervia collo, fessus quae Cretenque Myconon crate! Tegumenque quae invisi sudore per vocari quaque plus ventis fluidos. Nodo perque, fugisse pectora sorores.\nSumme promissa supple vadit lenius Quibus largis latebris aethera versato est, ait sentiat faciemque. Aequata alis nec Caeneus exululat inclite corpus est, ire tibi ostendens et tibi. Rigent et vires dique possent lumina; eadem dixit poma funeribus paret et felix reddebant ventis utile lignum.\n Remansit notam Stygia feroxque Et dabit materna Vipereas Phrygiaeque umbram sollicito cruore conlucere suus Quarum Elis corniger Nec ieiunia dixit  Vertitur mos ortu ramosam contudit dumque; placabat ac lumen. Coniunx Amoris spatium poenamque cavernis Thebae Pleiadasque ponunt, rapiare cum quae parum nimium rima.\nQuidem resupinus inducto solebat una facinus quae Credulitas iniqua praepetibus paruit prospexit, voce poena, sub rupit sinuatur, quin suum ventorumque arcadiae priori. Soporiferam erat formamque, fecit, invergens, nymphae mutat fessas ait finge.\n Baculum mandataque ne addere capiti violentior Altera duas quam hoc ille tenues inquit Sicula sidereus latrantis domoque ratae polluit comites Possit oro clausura namque se nunc iuvenisque Faciem posuit Quodque cum ponunt novercae nata vestrae aratra  Ite extrema Phrygiis, patre dentibus, tonso perculit, enim blanda, manibus fide quos caput armis, posse! Nocendo fas Alcyonae lacertis structa ferarum manus fulmen dubius, saxa caelum effuge extremis fixum tumor adfecit bella, potentes? Dum nec insidiosa tempora tegit spirarunt. Per lupi pars foliis, porreximus humum negant sunt subposuere Sidone steterant auro. Memoraverit sine: ferrum idem Orion caelum heres gerebat fixis?\n"
    },
    {
        "uri": "/docs/cyberd/cyberd/",
        "title": "cyberd: Computing the knowledge from web3",
        "description": "",
        "content": " Notes on cyber release of cyber:// protocol reference implementation using Go.\ncyber•Congress: @xhipster, @litvintech, @hleb-albau, @arturalbov, @npopeka\nAbstract A consensus computer allows computing of provably relevant answers without opinionated blackbox intermediaries such as Google, Youtube, Amazon or Facebook. Stateless content-addressable peer-to-peer communication networks such as IPFS and stateful consensus computers such as Ethereum provide part of the solution, but there are at least three problems associated with implementation. Of course, the first problem is the subjective nature of relevance. The second problem is that it is hard to scale consensus computer for a huge knowledge graph. The third problem is that the quality of such a knowledge graph will suffer from different attack surfaces such as sybil, selfish behaviour of interacting agents. In this paper, we (1) define a protocol for provable consensus computing of relevance between IPFS objects based on Tendermint consensus of cyber•rank computed on GPU, (2) discuss implementation details and (3) design distribution and incentive scheme based on our experience. We believe the minimalistic architecture of the protocol is critical for the formation of a network of domain-specific knowledge consensus computers. As a result of our work some applications never existed before emerge. We expand the work with our \u0026ldquo;after Genesis vision\u0026rdquo; on features and apps.\nIntroduction to web3 Original protocols of the Internet such as TCP/IP, DNS, URL, and HTTPS brought a web into the point where it is now. Along with all the benefits they have created they brought more problem to the table. Globality being a vital property of the web since inception is under real threat. The speed of connections degrades with network grow and from ubiquitous government interventions into privacy and security of web users. One property, not evident in the beginning, become important with everyday usage of the Internet: it\u0026rsquo;s ability to exchange permanent hyperlinks thus they would not break after time has passed. Reliance on \u0026ldquo;one at a time ISP\u0026rdquo; architecture allows governments effectively censor packets. It is the last straw in a conventional web stack for every engineer who is concerned about the future of our children.\nOther properties while being not so critical are very desirable: offline and real-time. Average internet user being offline must have the ability to work with the state it has and after acquiring connection being able to sync with global state and continue to verify state\u0026rsquo;s validity in realtime while having a connection. Now, these properties offered on the app level while such properties must be integrated into lower level protocols.\nThe emergence of a web3 stack creates an opportunity for a new kind of Internet. Community calls it web3. We call it \u0026ldquo;The Great Web\u0026rdquo; as it is expected that some low-level conventions must become immutable and not being changed for decades. e.g. immutable content links. It has a promise to remove problems of a conventional protocol stack and add to the web better speed and more accessible connection. However, as usual in a story with a new stack, new problems emerge. One of such problem is general-purpose search. Existing general-purpose search engines are restrictive centralized databases everybody forced to trust. These search engines were designed primarily for client-server architecture based on TCP/IP, DNS, URL, and HTTPS protocols. Web3 creates a challenge and opportunity for a search engine based on developing technologies and specifically designed for them. Surprisingly the permission-less blockchain architecture itself allows organizing general purpose search engine in a way inaccessible for previous architectures.\nOn adversarial examples problem Conventional architecture of search engines there one entity process and rank all the shit suffers from one hard but the particular problem that still has not been solved even by brilliant Google scientists: adversarial examples problem. The problem Google acknowledge is that it is rather hard to algorithmically reason either this particular sample is adversarial or not independently on how cool the learning technology is. Obviously, a cryptoeconomic approach can change beneficiaries in this game effectively removing possible sybil attack vectors and removing the necessity to make a decision on example crawling and meaning extraction from one entity to the whole world. Learning sybil-resistant model will probably lead to orders of magnitude more predictive results.\nCyber protocol at cyber  compute cyber inception of cyber protocol based on the Genesis distribution rules def knowledge graph state take cyberlinks check the validity of signatures check bandwidth limit check the validity of CIDv0 if signatures, bandwidth limit, and CIDv0 are valid than cyberlink is valid every round calculate cyber•rank deltas for the knowledge graph  Knowledge graph We represent a knowledge graph as a weighted graph of directed links between content addresses, or content identifications, or CIDs, or simply ipfs hashes. In this paper, we will use them as synonyms.\nContent addresses are essentially web3 links. Instead of using non-obvious and mutable thing:\nhttps://github.com/cosmos/cosmos/blob/master/WHITEPAPER.md  we can use pretty much exact thing:\nQme4z71Zea9xaXScUi6pbsuTKCCNFp5TAv8W5tjdfH7yuH  Using content addresses for building a knowledge graph we get so much needed superpowers of ipfs-like p2p protocols for a search engine:\n mesh-network future proof interplanetary tolerant accessible technology agnostic  Web3 agents generate our knowledge graph. Web3 agents include itself to the knowledge graph by transacting only once. Thereby they prove the existence of private keys for content addresses of revealed public keys. Using this basic proof mechanics consensus computer could have provable differentiation between subjects and objects in a knowledge graph.\nOur cyber implementation is based on cosmos-sdk identities and cidv0 content addresses.\nWeb 3 agents generate knowledge graph by applying cyberlinks.\nCyberlinks To understand cyberlinks, we need to understand the difference between URL link aka hyperlink and IPFS link. URL link points to the location of content, but IPFS link point to the content itself. The difference in web architecture based on location links and content links is drastical, hence require new approaches.\nCyberlink is an approach to link two content addresses or IPFS links semantically:\nQmdvsvrVqdkzx8HnowpXGLi88tXZDsoNrGhGvPvHBQB6sH . Qme4z71Zea9xaXScUi6pbsuTKCCNFp5TAv8W5tjdfH7yuH  This cyberlink means that cyberd presentation on cyberc0n is referencing Cosmos whitepaper. A concept of cyberlink is a convention around simple semantics of communication format in any peer to peer network:\n\u0026lt;content-address x\u0026gt;.\u0026lt;content-address z\u0026gt;\nYou can see that cyberlink represents a link between two links. Easy peasy!\nCyberlink is a simple yet powerful semantic construction for building a predictive model of the universe. That is, using cyberlinks instead of hyperlinks gives us superpowers inaccessible for previous architectures of general purpose search engines.\nCyberlinks can be extended, e.g. can form link chains if exist a series of two cyberlinks from one agent in which the second link in the first cyberlink is equal to the first link in the second cyberlink:\n\u0026lt;content-address x\u0026gt;.\u0026lt;content-address z\u0026gt; \u0026lt;content-address z\u0026gt;.\u0026lt;content-address z\u0026gt;  Using this simple principle, all interacting agents can reach consensus around interpreting clauses. So link chains are helpful for interpreting rich communications around relevance.\nAlso using the following link: QmNedUe2wktW65xXxWqcR8EWWssHVMXm3Ly4GKiRRSEBkn the one can signal the start and stop of execution in the knowledge graph. A lot of cool stuff can be done using cyberlinks.\nIf web3 agents expand native IPFS links with something semantically richer as DURA links than web3 agents can easier reach consensus on the rules for program execution. Indeed, DURA protocol is a proper implementation of a cyberlink concept.\ncyber implementation of cyberlinks based on DURA specification is available in .cyber app of browser cyb.\nBased on cyberlinks we can compute the relevance of subjects and objects in a knowledge graph. That is why we need a consensus computer.\nNotion of consensus computer Consensus computer is an abstract computing machine that emerges from agents interactions.\nA consensus computer has a capacity in terms of fundamental computing resources such as memory and computing. To interact with agents, a computer needs a bandwidth.\nIdeal consensus computer is a computer in which:\nthe sum of all computations and memory available for individuals is equal to the sum of all verified computations and memory of a *consensus computer*  We know that:\nverifications of computations \u0026lt; computations + verifications of computations  Hence we will not be able to achieve an ideal consensus computer ever. CAP theorem and scalability trilemma also prove this statement.\nHowever, this theory can work as a performance indicator of a consensus computer.\nAfter 6 years of investments into consensus computers, we find out that Tendermint consensus has a good balance between coolness for our task and readiness for production. So we decide to implement the cyber protocol using Tendermint which is very close to Cosmos Hub setting.\nThe cyber implementation is a 64-bit tendermint consensus computer of the relevance for 64-byte string space that is as far from ideal at least as 1\u0026frasl;146, because we have 146 validators who verify the same computation using the knowledge graph of the same size.\nWe must bind computational, storage and bandwidth supply of consensus computer with maximized demand on queries. Computation and storage in case of basic relevance machine can be easily predicted based on bandwidth, but bandwidth requires a limiting mechanism.\nBandwidth Bonded stake - stake, that deducted from your acc coins and put as deposit to take part in consensus. Due to the passive inflation model and slashing, deposit does not match 1-to-1 to the final reward. So, for example, stakeholders may wish to set up a script, that will periodically withdraw and rebound rewards to increase their bonded stake.\nActive stake - currently available for direct transfer, not-bonded stake.\nBandwidth stake = active stake + bonded stake.\nCyberd uses a very simple bandwidth model. The main goal of that model is to reduce daily network growth to given constant, say 3gb per day.\nThus, here we introduce resource credits, or RS. Each message type has assigned RS cost. There is constant DesirableNetworkBandwidthForRecoveryPeriod determining desirable for RecoveryPeriod spent RS value. RecoveryPeriod is defining how fast agent can recover their bandwidth from 0 to agent\u0026rsquo;s max bandwidth. An agent has maximum RS proportional to his stake by the formula:\nagent_max_rc = bandwidth_stake * DesirableNetworkBandwidthForRecoveryPeriod\nThere is a period AdjustPricePeriod summing how much RS was spent for that period AdjustPricePeriodTotalSpent. Also, there is constant AdjustPricePeriodDesiredSpent, used to calculate network loading.\nAdjustPricePeriodTotalSpent / AdjustPricePeriodDesiredSpent ratio is called fractional reserve ratio. If network usage is low, fractional reserve ratio adjust message cost (by simple multiplication) to allow agent with a lower stake to do more transactions. If resource demand increase, fractional reserve ratio goes \u0026gt;1 thus increase messages cost and limiting final tx count for some long-term period (RC recovery will be \u0026lt; then RC spending).\nThere are only two ways to change account bandwidth stake:\n Direct coins transfer. When distribution payouts occur. For example, when validator changes his commission rates, all delegations will be automatically unbounded. Another example, delegator itself unbond some part or full share.  So agents must have CYB tokens in accordance with their will of learning the knowledge graph. However, proposed mechanics of CYB tokens work not only as spam protection but as the economic regulation mechanism to align the ability of validators to process knowledge graph and market demand for processing.\nRelevance machine We define relevance machine as a machine that transition knowledge graph state based on the will of agents to learn the knowledge graph. The more agents will learn the knowledge graph the more valuable the graph becomes. This machine enables simple construction for search question querying and answers delivering.\nThe will is projected on every agent\u0026rsquo;s cyberlink. A simple rule prevents abuse by agents: one content address can be voted by a coin only once. So it does not matter for ranking from how much accounts you voted. The only sum of their balances matters.\nA useful property of a relevance machine is that it must have inductive reasoning property or follows the blackbox principle.\nShe must be able to interfere predictions without any knowledge about objects except who cyberlinked, when cyberlinked and what was cyberlinked.  If we assume that a consensus computer must have some information about linked objects the complexity of such model growth unpredictably, hence a requirement for a computer for memory and computations. That is, deduction of meaning inside the consensus computer is expensive thus our design depends on the blindness assumption. Instead of deducting a meaning inside the consensus computer we design a system in which meaning extraction is incentivized because agents need CYB to compute relevance.\nAlso, thanks to content addressing the relevance machine following the blackbox principle do not need to store the data but can effectively operate on it.\nHuman intelligence organized in a way to prune none-relevant and none-important memories with time has passed. The same way can do relevance machine. Also, one useful property of relevance machine is that it needs to store neither past state, nor full current state to remain useful, or more precisely: relevant. So relevance machine can implement aggressive pruning strategies such as pruning all history of knowledge graph formation or forgetting links that become non-relevant.\ncyber implementation of relevance machine is based on the most straightforward mechanism which is called cyber•Rank.\ncyber•Rank Ranking using consensus computer is hard because consensus computers bring serious resource bounds. e.g. Nebulas still fail to deliver something useful on-chain. First, we must ask ourselves why do we need to compute and store the rank on-chain, and not go Colony or Truebit way?\nIf rank computed inside consensus computer, you have an easy content distribution of the rank as well as an easy way to build provable applications on top of the rank. Hence we decided to follow more cosmic architecture. In the next section, we describe the proof of relevance mechanism which allows the network to scale with the help of domain-specific relevance machines that works in parallel thanks to IBC protocol.\nEventually, relevance machine needs to find (1) deterministic algorithm that allows computing a rank for a continuously appended network to scale the consensus computer to orders of magnitude that of Google. Perfect algorithm (2) must have linear memory and computation complexity. The most importantly it must have (3) highest provable prediction capabilities for the existence of relevant cyberlinks.\nAfter some research, we found that we can not find a silver bullet here. So we decided to find some more basic bulletproof way to bootstrap the network: the rank from which Larry and Sergey have bootstrapped a previous network. The key problem with the original PageRank is that it is not resistant to sybil attacks.\nToken weighted PageRank limited by token-weighted bandwidth do not have inherent problems of naive PageRank and is resistant to sybil attacks. For the time being, we will call it cyber•Rank until something better emerge.\nIn the center of the spam protection system is an assumption that write operations can be executed only by those who have a vested interest in the evolutionary success of a relevance machine. Every 1% of stake in consensus computer gives the ability to use 1% of possible network bandwidth and computing capabilities.\nAs nobody uses all possessed bandwidth, we can safely use up to 100x fractional reserves with 2-minute recalculation target. This mechanics offers a discount for cyberlinking thus effectively maximizing demand for it.\nWe would love to discuss the problem of vote buying mainly. Vote buying by itself is not such bad. The problem with vote buying appears in the systems where voting affects the allocation of inflation in the system like Steem or any state-based system. So vote buying can become easily profitable for adversary employing a zero-sum game without a necessity to add value. Our original idea of a decentralized search was based on this approach, but we reject this idea removing incentive on consensus level for knowledge graph formation completely. In our setting in which every participant must bring some value to the system to affect predictive model vote buying become NP-hard problem hence is useful for the system.\nWe understand that the ranking mechanism will always remain red herring. That is why we expect to rely on on-chain governance mechanism to define the winning one. We would love to switch from one algorithm to another, based on economic a/b testing through hard spoons of domain-specific relevance machines though.\nThe current implementation of consensus computer based on relevance machine for cyber•Rank can answer and deliver relevant results for any given search request in the 64 byte CID space. However, to build a network of domain-specific relevance machines, it is not enough. Consensus computers must have the ability to prove relevance for each other.\nProof of relevance We design a system under the assumption that regarding search such thing as bad behaviour does not exist as anything bad can be in the intention of finding answers. Also, this approach significantly reduces attack surfaces.\n Ranks are computed on the only fact that something has been searched, thus linked and as a result, affected the predictive model.\n A good analogy is observing in quantum mechanics. That is why we do not need such things as negative voting. Doing this we remove subjectivity out of the protocol and can define proof of relevance.\nRank state = rank values stored in a one-dimensional array and merkle tree of those values  Each new CID gets a unique number. The number starts from zero and incrementing by one for each new CID. So that we can store rank in a one-dimensional array where indices are CID numbers.\nMerkle Tree calculated based on RFC-6962 standard. Since rank stored in a one-dimensional array where indices are CID numbers (we could say that it ordered by CID numbers) leaves in merkle tree from left to right are SHA-256 hashes of rank value. Index of the leaf is CID number. It helps to easily find proofs for specified CID (log n iterations where n is a number of leaves).\nTo store merkle tree is necessary to split the tree into subtrees with a number of leaves multiply of the power of 2. The smallest one is obviously subtree with only one leaf (and therefore height == 0). Leaf addition looks as follows. Each new leaf is added as subtree with height == 0. Then sequentially merge subtrees with the same height from right to left.\nExample:\n ┌──┴──┐ │ ┌──┴──┐ │ ┌──┴──┐ │ │ ┌─┴─┐ ┌─┴─┐ │ ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ ┌─┴─┐ │ (5-leaf) (6-leaf) (7-leaf)  To get merkle root hash - join subtree roots from right to left.\nRank merkle tree can be stored differently:\nFull tree - all subtrees with all leaves and intermediary nodes\nShort tree - contains only subtrees roots\nThe trick is that full tree is only necessary for providing merkle proofs. For consensus purposes and updating tree, it\u0026rsquo;s enough to have a short tree. To store merkle tree in database the one can use only a short tree. Marshaling of a short tree with n subtrees (each subtree takes 40 bytes):\n\u0026lt;subtree_1_root_hash_bytes\u0026gt;\u0026lt;subtree_1_height_bytes\u0026gt; .... \u0026lt;subtree_n_root_hash_bytes\u0026gt;\u0026lt;subtree_n_height_bytes\u0026gt;  For 1,099,511,627,775 leaves short tree would contain only 40 subtrees roots and take only 1600 bytes.\nLet us denote rank state calculation:\np - rank calculation period\nlbn - last confirmed block number\ncbn - current block number\nlr - length of rank values array\nFor rank storing and calculation we have two separate in-memory contexts:\n Current rank context. It includes the last calculated rank state (values and merkle tree) plus all links and agent stakes submitted to the moment of this rank submission. New rank context. It\u0026rsquo;s currently calculating (or already calculated and waiting for submission) rank state. Consists of new calculated rank state (values and merkle tree) plus new incoming links and updated agent stakes.  Calculation of new rank state happens once per p blocks and going in parallel.\nThe iteration starts from the block number that ≡ 0 (mod p) and goes till next block number that ≡ 0 (mod p).\nFor block number cbn ≡ 0 (mod p) (including block number 1 cause in cosmos blocks starts from 1):\n Check if the rank calculation is finished. If yes then go to (2.) if not - wait till calculation finished (actually this situation should not happen because it means that rank calculation period is too short). Submit rank, links and agent stakes from new rank context to current rank context. Store last calculated rank merkle tree root hash. Start new rank calculation in parallel (on links and stakes from current rank context).  For each block:\n All links go to a new rank context. New coming CIDs gets rank equals to zero. We could do it by checking the last CIDs number and lr (it equals the number of CIDs that already have rank). Then add CIDs with number \u0026gt;lr to the end of this array with the value equal to zero. Update current context merkle tree with CIDs from the previous step Store latest merkle tree from current context (let us call it last block merkle tree). Check if new rank calculation finished. If yes go to (4.) if not go to next block. Push calculated rank state to new rank context. Store merkle tree of newly calculated rank.  To sum up. In current rank context, we have rank state from last calculated iteration (plus, every block, it updates with new CIDs). Moreover, we have links and agent stakes that are participating in current rank calculation iteration (whether it finished or not). The new rank context contains links and stakes that will go to next rank calculation and newly calculated rank state (if a calculation is finished) that waiting for submitting.\nIf we need to restart node firstly, we need to restore both contexts (current and new). Load links and agent stakes from a database using different versions: 1. Links and stakes from last calculated rank version v = lbn - (lbn mod n) go to current rank context. 2. Links and stakes between versions v and lbn go to new rank context.\nAlso to restart node correctly, we have to store the following entities in database:\n Last calculated rank hash (merkle tree root) A newly calculated rank short merkle tree Last block short merkle tree  With last calculated rank hash and newly calculated rank merkle tree we could check if the rank calculation was finished before node restart. If they are equal, then the rank wasn\u0026rsquo;t calculated, and we should run the rank calculation. If not we could skip rank calculation and use newly calculated rank merkle tree to participate in consensus when it comes to block number cbn ≡ 0 (mod p) (rank values will not be available until rank calculation happens in next iteration. Still validator can participate in consensus so nothing bad).\nLast block merkle tree necessary to participate in consensus till the start of next rank calculation iteration. So, after the restart we could end up with two states: 1. Restored current rank context and new rank context without rank values (links, agent stakes, and merkle tree). 2. Restored current rank context without rank values. Restored new rank context only with links and agent stakes.\nA node can participate in consensus but cannot provide rank values (and merkle proofs) till two rank calculation iterations finished (current and next). Search index should be run in parallel and do not influence the work of the consensus machine. The validator should be able to turn off index support.\nNow we have proof of rank of any given content address. While the relevance is still subjective by nature, we have a collective proof that something was relevant for some community at some point in time.\nFor any given CID it is possible to prove the relevance  Using this type of proof any two IBC compatible consensus computers can proof the relevance to each other so that domain-specific relevance machines can flourish. Thanks to inter-blockchain communication protocol you basically can either launch your own domain-specific search engine by forking cyberd which is focused on the common public knowledge, or plug cyberd as a module in existing chain, e.g. Cosmos Hub. So in our search architecture, domain-specific relevance machine can learn from common knowledge.\nIn our relevance for commons cyber implementation proof of relevance root hash is computed on Cuda GPUs every round.\nSpeed and scalability We need speedy confirmation times to feels like the usual web app. It is a strong architecture requirement that shapes an economic topology and scalability of the cyber protocol.\nProposed blockchain design is based on Tendermint consensus algorithm with 146 validators and has very fast 2 second finality time. Average confirmation timeframe at half the second with asynchronous interaction make complex blockchain search almost invisible for agents.\nLet us say that our node implementation based on cosmos-sdk can process 10k transactions per second. Thus every day at least 8.64 million agents can submit 100 cyberlinks each and impact results simultaneously. That is enough to verify all assumptions in the wild. As blockchain technology evolves we want to check that every hypothesis work before scale it further. Moreover, the proposed design needs demand for full bandwidth in order the relevance becomes valuable. That is why we strongly focus on accessible, but provable distribution from inception.\nApproach toward distribution While designing the initial distribution structure for Cyber protocol we aimed to achieve the following goals:\n Develop provable and transparent distribution in accordance with best industry practices Allow equal participation irrespectively of political, regulatory or any other restrictions which may be imposed by outside agents Prevent attacks on privacy such as installment of KYC requirements Spread distribution in time to grant equal access to all agents to initial distribution without any limitations such as hard caps or any other restrictions Honour genesis Cosmos investors for the development of technology which made possible simplified development of Cyber protocol Attract the most professional validators from Cosmos ecosystem for bootstrapping the network Allow easy early access for active agents of Ethereum ecosystem in order to accelerate the growth of the knowledge graph and solve chicken and egg problem Decentralize management of auction donations starting from day 0 Honour 30 months of cyber•Congress R\u0026amp;D and community behind it  The goal of creating an alternative to a Google-like structure requires extraordinary effort of different groups. So we decide to set up cyber•Foundation as a fund managed via decentralized engine such as Aragon DAO filled with ETH and managed by agents who participated in initial distribution. This approach will allow safeguarding from excessive market dumping of native platform CYB tokens in the first years of work, thereby ensuring stable development. Additionally, this allows to diversify underlying platform and extend the protocol to other consensus computing architecture should the need arise.\nWhile choosing token for donations we followed three main criteria: the token must be (1) one of the most liquid, (2) the most promising, so a community can secure a solid investment bag to be competitive even comparing to giants like Google and (3) have technical ability to execute auction and resulting organization without relying on any third party. So the only system matches these criteria is Ethereum, hence the primary token of donations will be ETH. That is why we decide to create 2 tokens: THC and CYB:\nWhile choosing token for donations we followed three main criteria: the token must be (1) one of the most liquid, (2) the most promising, so a community can secure a solid investment bag for be competitive even comparing to giants like Google and (3) have technical ability to execute auction and resulting organization without relying on any third party. So the only system matches this criteria is Ethereum, hence the primary token of donations will be ETH. That is why we decide to create 2 tokens: THC and CYB:\n THC is a creative cyber proto substance. THC being an Ethereum ERC-20 compatible token have utility value in form of control cyber•Foundation (Aragon DAO) ETH from auction proceeds. THC was emitted during the creation of cyber•Foundation as Aragon organization. Creative power of THC came from ability to receive 1 CYB per each 1 THC for locking it during cyber•Auction. CYB is native token of sovereign Cyber protocol under Tendermint consensus algorithm. It\u0026rsquo;s also has 2 primary uses: (1) is a staking for consensus and (2) is bandwidth limiting for submitting links and computing the rank.  Both tokens remain functional and will track value independently due to very different utility nature.\nInitial distribution happens in a 3 different by nature and goals epochs and is spread in time for almost 2 years:\n Pre-genesis: 21 days. Is needed to launch cyber protocol in a decentralized fashion with independent genesis validators.\n Genesis: 21 days. Launch of main net and Game of Thrones: needed to involve the most active Ethereum and Cosmos crypto players into an engaging game with the ability to fully understand and test software using real network and incentives. Game of Thrones is a kind of distribution game with some discount for the attraction of necessary critical mass in order to make possible of learning the early knowledge graph by the most intelligent community.\n Post-Genesis: 600 days. Continuous distribution of CYB based on cyber•Auction proceeds: needed in order to involve into initial distribution existing crypto community and beyond.\n  Pre-genesis Only 2 distribution events happens happens prior to Genesis:\n 700 000 000 000 000 THC tokens are minted by cyber•Foundation. Allocations of THC tokens is the following:   100 000 000 000 000 THC is allocated to cyber•Congress 600 000 000 000 000 THC is allocated to cyber•Auction contract   At the start of euler-5 donation round in ATOMs started. Purpose of this round is to involve real validators at a genesis. 5% of CYB will be allocated to participants of this donation round.  Genesis and Game of Thrones Genesis of cyber protocol will contains 1 000 000 000 000 000 CYB (One Quadrillion CYB) broken down as follows:\n 600 000 000 000 000 CYB under multisig managed by cyberCongress for manual distributions during cyber•Auction for those who stake THC until the end of cyber•Auction 200 000 000 000 000 CYB under multisig managed by cyberCongress: the Game of Thrones for ATOM and ETH holders, 100 TCYB for each. 100 000 000 000 000 CYB for top 80% ETH holders by stake excluding contracts 50 000 000 000 000 CYB as drop for all ATOM stakeholders 50 000 000 000 000 CYB for pre-genesis contributors in ATOM  Game of Thrones - is a game between ATOM and ETH holders for being the greatest. As a result of 21-day auction after Genesis, every community earn 10% of CYB. In order to make the game run smoothly we concisely adding arbitrage opportunity in the form of significant discount to ATOM holders because the system needs provably professional validators and delegators at the beginning and basically for free.\nWe can describe the discount in the following terms: Currently buying power of all ATOMs against all ETHs based on current caps is about 1\u0026frasl;24. Given that 10% of CYB will be distributed based on donation in ATOMs and 10% of CYB will be distributed based on donations in ETHs the discount for every ATOM donation during Game of Thrones is about 24x which is significant enough to encourage participation based on arbitrage opportunity during the first 21 days of Genesis auction and stimulate the price of ATOMs as appreciation for all cosmic community.\nPost-genesis and cyber•Auction Post Genesis stage called cyber•Auction starts after the end of the Game of Thrones and lasts 600 rounds 23 hours each. During this phase, CYBs are continuously distributed based on locked THC bough in the continuous auction.\nThe role of cyber•Auction is twofold:\n It creates non-exlusive long lasting and provable game of initial distribution without necessity to spend energy on proof of work. It is crucial that early knowledge graph were created in some sense fairly by engaged community which was formed during a non-exclusive game. As a result of auction community will has access to all raised resources under Aragon organisation. We believe in a true decentralized nature of the thing we created so we do not want to grab all the money from the funding as we already funded the creation of the system ourselves and we kindly ask fair 10% CYB cut for pre-genesis investors, founders and developers. Competing with Google is challenging and will be more viable if community will sits on the bag of ever-growing ETH. Given current growth rate of ETH this bag can be very compelling in some years after launch. Also this bag can be the source of alternative implementation of the protocol if Cosmos based system will fail, or in the cased the community just want to diversify technology involved, e.g. ETH2, Polkadot or whatever.  After genesis CYB tokens can be created only by validators based on staking and slashing parameters. The basic consensus is that newly created CYB tokens are distributed to validators as they do the essential work to make relevance machine run both regarding energy consumed for computation and cost for storage capacity. So stakeholders decide where the tokens can flow further.\nAfter Genesis inflation adjusted using TokensPerBlock parameter. Given that the network has 2 second target block and ~7% target inflation the starting parameter will be 50 MCYB.\nThere is no currently such thing as the maximum amount of CYB due to continuous inflation paid to validators. Currently, CYB is implemented using 64int so the creation of more CYB makes significantly more expensive compute state changes and rank. We expect that lifetime monetary strategy must be established by the governance system after complete initial distribution of CYB and activation of smart contract functionality.\nThe following rules apply for CYBs under cyber•Auction multisig:\n will not delegate its stake and as result will remain as passive stake until become distributed after the end of cyber•Auction, all remaining CYBs will be provably burned  Role of ATOMs Overall 15% of CYB will be distributed based on donations in ATOMs during 2 rounds:\n 50 000 000 000 000 CYB for genesis ATOM contributors 100 000 000 000 000 CYB for ATOM contributors at the start of Smith Epoch  All ATOM donations go to cyber•Congress multisig. The role of ATOM donations is the following: thanks to ATOM we want to secure lifetime commitment of cyber•Congress in the development of Cosmos and Cyber ecosystems. ATOM donations to cyber•Congress will allow us to use staking rewards for continuous funding of the Cyber protocol without the necessity to dump CYBs\nLearning the Graph We assume that the proposed algorithms do not guarantee high quality knowledge by default. Like a child it needs to be learned in order to live well. Protocol itself provides only one simple tool: the ability to create a cyberlink with a certain weight between two content addresses.\nAnalysis of the semantic core, behavioral factors, anonymous data about the interests of agents and other tools that determine the quality of the search can be done in smart contracts and off-chain applications, such as web3 browsers, decentralized social networks and content platforms. So it is the goal of the community and agents to build an initial knowledge graph and maintain it to provide the most relevant search.\nWe suggest that the knowledge graph could be created using the following methods:\n agents can use different applications, like cyb.virus chrome extension, in which agents save their content or content they like to IPFS and link it with relevant keywords validators and search enthusiasts use automatic scripts to create and index for popular resources, like Wikipedia or transfer and edit current search result from Google and other search engines In the process of information search by agent in open source application (like cyb web3 browser or any other), application itself analyzes current rank, the semantic core of the content, the behavior of the agent, when searching and viewing content (agent transitions between content, bounce rate, viewing time and others). Based on this data and using the balance of agent CYB tokens, the application automatically or with agent input links content. Agents will choose which open source application to use for search and how it will affect the rank. In this case, creating a knowledge graph ceases to be a black box and becomes absolutely transparent. Data about the agents search queries and their behavior remain on their devices, ensuring anonymity. This data can be synced between devices by agent\u0026rsquo;s private instance of the cyber chain. Existing search engines, such as Google, use thousands of professional assessors to improve the quality of search rank. Validators have the maximum economic interest in the entire protocol and can voluntarily allocate part of their commission in CYB tokens on smart contract to pay for professional search assessors. Each validator can provide an application for assessor to make a search more relevant. Application index all transactions and stores information about changes of weights in the knowledge graph. Assessors receive assignments to check the relevance of cyberlinks and, if necessary, they increase cyberlinks weight. The validator automatically checks for increased or decreased cyberlink weights with which assessor has worked. If the assessor increased the weight of the link and the final weight due to the actions of the other agents also increased, then the cyberlink was more relevant and the assessor receives a reward from validator.  We are confident that the measures described above will allow us to build an effective search, created by people for people, without the need to transfer their personal data to intermediaries like Google and Facebook.\nIn-browser implementation We wanted to imagine how that could work in a web3 browser. To our disappointment we were not able to find the web3 browser that can showcase the coolness of the proposed approach in action. That is why we decide to develop the web3 browser cyb that has sample application .cyber for interacting with cyber:// protocol.\nAs another good example, we created a Chrome extension that allows anybody to pin any web page to ipfs and index it by any keywords, thus make it searchable.\nCurrent search snippets are ugly, but we expect they can be easily extended using IPLD for different types of content so they can be even more beautiful than that of Google.\nDuring the implementation of proposed architecture, we realize at least 3 key benefits a Google probably would not be able to deliver with conventional approach:\n the search result can be easily delivered from a p2p network right into search results: eg. .cyber can play video. payment buttons can be embedded right into search snippets, so web3 agent can interact with search results, eg. an agent can buy an item right in .cyber. So e-commerce can flourish because of transparent conversion attribution. search snippets must not be static but can be interactive, eg. .cyber eventually can answer location-based answers.  Roadmap We foresee the demand for the following protocol features community could work on after launch:\n Parametrization Universal oracle IBC WASM VM for gas Onchain upgrades CUDA VM for gas Privacy by default  Applications of knowledge graph A lot of cool applications can be built on top of proposed architecture:\nWeb3 browsers. It easy to imagine the emergence of a full-blown blockchain browser. Currently, there are several efforts for developing browsers around blockchains and distributed tech. Among them are Beaker, Mist, Brave, and Metamask. All of them suffer from trying to embed web2 in web3. Our approach is a bit different. We consider web2 as the unsafe subset of web3. That is why we decide to develop a web3 browser that can showcase the cyber approach to answer questions better.\nProgrammable semantic cores. Currently, the most popular keywords in a gigantic semantic core of Google are keywords of apps such as youtube, facebook, github, etc. However, developers have a very limited possibility to explain Google how to better structure results. The cyber approach brings this power back to developers. On any given input string in any application, relevant answer can be computed either globally, in the context of an app, an agent, geo or in all of them combined.\nSearch actions. Proposed design enables native support for blockchain asset related activity. It is trivial to design applications which are (1) owned by creators, (2) appear right in search results and (3) allow a transact-able call to actions with (4) provable attribution of a conversion to search query. e-Commerce has never been so easy for everybody.\nOffline search. IPFS makes possible easy retrieval of documents from surroundings without a global internet connection. cyberd can itself can be distributed using IPFS. That creates a possibility for ubiquitous offline search.\nCommand tools. Command line tools can rely on relevant and structured answers from a search engine. That practically means that the following CLI tool is possible to implement\n\u0026gt; cyberd earn using 100 gb hdd Enjoy the following predictions: - apt install go-filecoin: 0.001 BTC per month per GB - apt install siad: 0.0001 BTC per month per GB - apt install storjd: 0.00008 BTC per month per GB According to the best prediction, I made a decision try `mine go-filecoin` Git clone ... Building go-filecoin Starting go-filecoin Creating a wallet using @xhipster seed You address is .... Placing bids ... Waiting for incoming storage requests ...  Search from CLI tools will inevitably create a highly competitive market of a dedicated semantic core for bots.\nAutonomous robots. Blockchain technology enables the creation of devices which can earn, store, spend and invest digital assets by themselves.\n If a robot can earn, store, spend and invest she can do everything you can do\n What is needed is a simple yet powerful state reality tool with the ability to find particular things. cyberd offers minimalistic but continuously self-improving data source that provides necessary tools for programming economically rational robots. According to top-10000 english words the most popular word in English is defined article the that means a pointer to a particular thing. That fact can be explained as the following: particular things are the most important for us. So the nature of our current semantic computing is to find unique things. Hence the understanding of unique things become essential for robots too.\nLanguage convergence. A programmer should not care about what language do an agent use. We don\u0026rsquo;t need to know about what language agent is searching in. Entire UTF-8 spectrum is at work. A semantic core is open so competition for answering can become distributed across different domain-specific areas, including semantic cores of different languages. The unified approach creates an opportunity for cyber•Bahasa. Since the Internet, we observe a process of rapid language convergence. We use more truly global words across the entire planet independently of our nationality, language and race, Name the Internet. The dream of truly global language is hard to deploy because it is hard to agree on what means what. However, we have the tools to make that dream come true. It is not hard to predict that the shorter a word, the more its cyber•rank will be. Global publicly available list of symbols, words, and phrases sorted by cyber•rank with corresponding links provided by cyberd can be the foundation for the emergence of genuinely global language everybody can accept. Recent scientific advances in machine translation are breathtaking but meaningless for those who wish to apply them without Google scale trained model. Proposed cyber•rank offers precisely this.\nThis is sure not the exhaustive list of possible applications but very exciting, though.\nApps on top of knowledge graph Our approach to the economics of consensus computer is that agents buy an amount of RAM, CPU, and GPU as they want to execute programs. OpenCypher or GraphQL like language can be provided to explore the semantics of the knowledge graph. The following list is simple programs we can envision that can be built on top of simple relevance machine with the support of onchain WASM-like VM.\nSelf prediction. A consensus computer can continuously build a knowledge graph by itself predicting the existence of cyberlinks and applying these predictions to a state of itself. Hence a consensus computer can participate in the economic consensus of the cyber protocol.\nUniversal oracle. A consensus computer can store the most relevant data in the key-value store, where the key is cid and value is bytes of actual content. She is doing it by making a decision every round about which cid value she want to prune and which she wants to apply based on the utility measure of content addresses in the knowledge graph. To compute utility measure validators check availability and size of content for the top-ranked content address in the knowledge graph, then weight on the size of cids and its ranks. The emergent key-value store will be available to write for consensus computer only and not agents, but values can be used in programs.\nProof of location. It is possible to construct cyberlinks with proof-of-location based on some existing protocol such as Foam. So location-based search also can become provable if web3 agents will mine triangulations and attaching proof of location for every link chain.\nProof of web3 agent. Agents are a subset of content addresses with one fundamental property: consensus computer can prove the existence of private keys for content addresses for the subset of knowledge graph even if those addresses has never transacted in its own chain. Hence it is possible to compute much provable stuff on top of that knowledge. E.g., some inflation can be distributed to addresses that have never transacted in the cyber network but have the provable link.\nMotivation for read requests. It would be great to create cybernomics not only for write requests to consensus computer but from read requests also. So read requests can be two order of magnitude cheaper, but guaranteed. Read requests to a search engine can be provided by the second tier of nodes which earn CYB tokens in state channels. We consider implementing state channels based on HTLC and proof verification which unlocks amount earned for already served requests.\nPrediction markets on link relevance. We can move the idea further by the ranking of knowledge graph based on prediction market on links relevance. An app that allows betting on link relevance can become a unique source of truth for the direction of terms as well as motivate agents to submit more links.\nPrivate cyberlinks. Privacy is foundational. While we are committed to privacy achieving implementation of private cyberlinks is unfeasible for our team up to Genesis. Hence it is up to the community to work on wasm programs that can be executed on top of the protocol. The problem is to compute cyberRank based on cyberlink submitted by a web3 agent without revealing neither previous request nor public keys of a web3 agent. Zero-knowledge proofs, in general, are very expensive. We believe that the privacy of search should be must by design, but not sure that we know how to implement it. Coda like recursive snarks and mimblewimble constructions, in theory, can solve part of the privacy issue, but they are new, untested and anyway will be more expensive regarding computations than a transparent alternative.\nConclusion We define and implement a protocol for provable communications of consensus computers on relevance. The protocol is based on a simple idea of content defined knowledge graphs which are generated by web3 agents using cyberlinks. Cyberlinks are processed by a consensus computer using a concept we call relevance machine. cyber consensus computer is based on CIDv0 and uses go-ipfs and cosmos-sdk as a foundation. IPFS provides significant benefits regarding resources consumption. CIDv0 as primary objects are robust in its simplicity. For every CIDv0 cyber•rank is computed by a consensus computer with no single point of failure. Cyber•rank is CYB weighted PageRank with economic protection from sybil attacks and selfish voting. Every round merkle root of the rank tree is published so every computer can prove to any computer a relevance value for a given CID. Sybil resistance is based on bandwidth limiting. Embedded ability to execute programs offer inspiring apps. Starting primary goal is the indexing of peer-to-peer systems with self-authenticated data either stateless, such as IPFS, Swarm, DAT, Git, BitTorrent, or stateful such as Bitcoin, Ethereum and other blockchains and tangles. Proposed semantics of linking offers a robust mechanism for predicting meaningful relations between objects by a consensus computer itself. The source code of a relevance machine is open source. Every bit of data accumulated by a consensus computer is available for everybody if the one has resources to process it. The performance of proposed software implementation is sufficient for seamless agent interactions. Scalability of proposed implementation is enough to index all self-authenticated data that exist today and serve it to millions of web3 agents. The blockchain is managed by a decentralized autonomous organization which functions under Tendermint consensus algorithm with standard governance module. Thought a system provides necessary utility to offer an alternative for conventional search engines it is not limited to this use case either. The system is extendable for numerous applications and, e.g. makes it possible to design economically rational self-owned robots that can autonomously understand objects around them.\nReferences  cyberd Scholarly context adrift Web3 stack Search engines information retrieval in practice Motivating game for adversarial example research An idea of decentralized search IPFS DAT cosmos-sdk CIDv0 Thermodynamics of predictions DURA Nebulas Colony Truebit SpringRank presentation PageRank RFC-6962 IBC protocol Tendermint Comparison of web3 browsers Cyb Cyb virus SpringRank How to become validator in cyber protocol Top 10000 english words Multilingual neural machine translation Foam Coda Mimblewimble Tezos Software 2.0  "
    },
    {
        "uri": "/docs/advanced/",
        "title": "docs1",
        "description": "",
        "content": " Vagus elidunt Mole et vultus populifer quaque primoque non Lorem markdownum pignora pelle est tota propiore conpellat pectoribus de pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Mane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nvar multiplatform = cifs(illegal, zip, memory) / pcbPowerJavascript; hdmi -= 3; tunneling(constant(service_fi_hyper, avatarBar), matrixUmlMbps); frequency /= nat(keyboardRecycle, programmingGnuPerl) + icfExbibyteCursor; io_dithering(-5, markup / languageShortcut - driveHtml);  Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna, ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n"
    }]
    